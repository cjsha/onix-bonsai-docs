{
  "README.html": {
    "href": "README.html",
    "title": "onix-docs",
    "keywords": "onix-docs Documentation, technical reference manual, and examples for the Bonsai ONI packages Building docs locally To build everything, including the Bonsai workflows, and view locally, run .\\build.ps1 docfx.json --serve"
  },
  "api/OpenEphys.Onix.Bno055Data.html": {
    "href": "api/OpenEphys.Onix.Bno055Data.html",
    "title": "Class Bno055Data",
    "keywords": "Bno055Data source Operator A class that generates a sequence of 3D orientation measurements produced by BNO055 9-axis inertial measurement unit. This data stream class must be linked to an appropriate configuration, such as a ConfigureBno055, in order to stream 3D orientation data. Inputs & Outputs Generates a sequence of Bno055DataFrame objects, each of which contains a 3D orientation sample in various formats along with device metadata. Bno055DataFrame Properties Property Type Description DeviceName string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. This is often a one-to-one representation of an ONI device, but can also represent abstract ONI device aggregates or virtual devices."
  },
  "api/OpenEphys.Onix.BreakoutAnalogInput.html": {
    "href": "api/OpenEphys.Onix.BreakoutAnalogInput.html",
    "title": "Class BreakoutAnalogInput",
    "keywords": "BreakoutAnalogInput source Operator Produces a sequence of analog input frames from an ONIX breakout board. Inputs & Outputs Generates a sequence of BreakoutAnalogInputDataFrame. BreakoutAnalogInputDataFrame Properties Property Type Description BufferSize int Gets or sets the number of samples collected for each channel that are use to create a single BreakoutAnalogInputDataFrame. This property determines the number of analog samples that are buffered for each channel before data is propagated. For instance, if this value is set to 100, then 100 samples, along with corresponding clock values, will be collected from each of the input channels and packed into each BreakoutAnalogInputDataFrame. Because channels are sampled at 100 kHz, this is equivalent to 1 millisecond of data from each channel. DataType BreakoutAnalogIODataType Gets or sets the data type used to represent analog samples. If S16 is selected, each ADC sample is represented at a signed, twos-complement encoded 16-bit integer. S16 samples can be converted to a voltage using each channels' BreakoutAnalogIOVoltageRange selection. For instance, channel 0 can be converted using InputRange0. When Volts is selected, the voltage conversion is performed automatically and samples are represented as 32-bit floating point voltages. DeviceName string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. This is often a one-to-one representation of an ONI device, but can also represent abstract ONI device aggregates or virtual devices."
  },
  "api/OpenEphys.Onix.BreakoutAnalogOutput.html": {
    "href": "api/OpenEphys.Onix.BreakoutAnalogOutput.html",
    "title": "Class BreakoutAnalogOutput",
    "keywords": "BreakoutAnalogOutput sink Operator Sends analog output data to an ONIX breakout board. Inputs & Outputs Send samples to analog outputs. Mat A sequence of 12xN sample matrices containing the analog data to write to channels 0 to 11. Mat A sequence of 12xN sample matrices containing the analog data that were written to channels 0 to 11. Send samples to analog outputs. short[] A sequence of 12x1 element arrays each containing the analog data to write to channels 0 to 11. short[] A sequence of 12x1 element arrays each containing the analog data to write to channels 0 to 11. Send samples to analog outputs. float[] A sequence of 12x1 element arrays each containing the analog data to write to channels 0 to 11. float[] A sequence of 12x1 element arrays each containing the analog data to write to channels 0 to 11. Properties Property Type Description DataType BreakoutAnalogIODataType Gets or sets the data type used to represent analog samples. If S16 is selected, each DAC value is represented by a signed, twos-complement encoded 16-bit integer. In this case, the output voltage always corresponds to TenVolts. When Volts is selected, 32-bit floating point voltages between -10 and 10 volts are sent directly to the DACs. DeviceName string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. This is often a one-to-one representation of an ONI device, but can also represent abstract ONI device aggregates or virtual devices."
  },
  "api/OpenEphys.Onix.BreakoutDigitalInput.html": {
    "href": "api/OpenEphys.Onix.BreakoutDigitalInput.html",
    "title": "Class BreakoutDigitalInput",
    "keywords": "BreakoutDigitalInput source Operator A class that produces a sequence of digital input frames from an ONIX breakout board. This data stream class must be linked to an appropriate configuration, such as a ConfigureBreakoutDigitalIO, in order to stream data. Inputs & Outputs Generates a sequence of BreakoutDigitalInputDataFrame objects, which contains information about breakout board's digital input state. Digital inputs are not regularly sampled. Instead, a new BreakoutDigitalInputDataFrame is produced each whenever any digital state (i.e. a digital input pin, button, or switch state) changes. BreakoutDigitalInputDataFrame Properties Property Type Description DeviceName string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. This is often a one-to-one representation of an ONI device, but can also represent abstract ONI device aggregates or virtual devices."
  },
  "api/OpenEphys.Onix.BreakoutDigitalOutput.html": {
    "href": "api/OpenEphys.Onix.BreakoutDigitalOutput.html",
    "title": "Class BreakoutDigitalOutput",
    "keywords": "BreakoutDigitalOutput sink Operator Sends digital output data to an ONIX breakout board. Inputs & Outputs Updates the digital output port state. BreakoutDigitalPortState A sequence of BreakoutDigitalPortState values indicating the state of the breakout board's 8 digital output pins BreakoutDigitalPortState A sequence that is identical to source. Properties Property Type Description DeviceName string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. This is often a one-to-one representation of an ONI device, but can also represent abstract ONI device aggregates or virtual devices."
  },
  "api/OpenEphys.Onix.ConfigureBno055.html": {
    "href": "api/OpenEphys.Onix.ConfigureBno055.html",
    "title": "Class ConfigureBno055",
    "keywords": "ConfigureBno055 sink Operator A class for configuring a Bosch BNO055 9-axis inertial measurement unit (IMU). This configuration class can be linked to a Bno055Data instance to stream orientation data from the IMU. Inputs & Outputs Configures a Bosch BNO055 9-axis IMU device. This will schedule configuration actions to be applied by a StartAcquisition instance prior to data acquisition. ContextTask A sequence of ContextTask instances that holds configuration actions. ContextTask The original sequence modified by adding additional configuration actions required to configure a BNO055 device. ContextTask Data Frame Member Type Description AcquisitionClockHz uint Gets the acquisition clock rate in Hz. This describes the frequency of the clock used to drive the acquisition counter which is used to provide the clock counter values in oni.Frame.Clock and its derivative types (e.g. Clock, Clock, etc.) BlockReadSize int Gets the number of bytes read by the device driver access to the read channel. This option allows control over a fundamental trade-off between closed-loop response time and overall bandwidth. A minimal value, which is determined by MaxReadFrameSize, will provide the lowest response latency, so long as data can be cleared from hardware memory fast enough to prevent buffering. Larger values will reduce system call frequency, increase overall bandwidth, and may improve processing performance for high-bandwidth data sources. The optimal value depends on the host computer and hardware configuration and must be determined via testing (e.g. using MemoryMonitorData). BlockWriteSize int Gets the number of bytes that are pre-allocated for writing data to hardware. This value determines the amount of memory pre-allocated for calls to Write(uint, IntPtr, int), Write<T>(uint, T), and Write<T>(uint, T[]). A larger size will reduce the average amount of dynamic memory allocation system calls but increase the cost of each of those calls. The minimum size of this option is determined by MaxWriteFrameSize. The effect on real-timer performance is not as large as that of BlockReadSize. DeviceTable Dictionary<uint, Device> Gets the device table containing the full device hierarchy governed by the internal oni.Context. This dictionary maps a fully-qualified oni.Device.Address to an oni.Device instance. MaxReadFrameSize uint Gets the maximal size of a frame produced by a call to oni.Context.ReadFrame() in bytes. This number is the maximum sized frame that can be produced across every device within the device table that generates data. MaxWriteFrameSize uint Gets the maximal size consumed by a call to Write(uint, IntPtr, int) in bytes. This number is the maximum sized frame that can be consumed across every device within the device table that accepts write data. SystemClockHz uint Gets the system clock rate in Hz. This describes the frequency of the clock governing the controller hardware. Properties Property Type Description Enable bool Gets or sets the device enable state. If set to true, a Bno055Data instance that is linked to this configuration will produce data. If set to false, it will not produce data."
  },
  "api/OpenEphys.Onix.ConfigureBreakoutAnalogIO.html": {
    "href": "api/OpenEphys.Onix.ConfigureBreakoutAnalogIO.html",
    "title": "Class ConfigureBreakoutAnalogIO",
    "keywords": "ConfigureBreakoutAnalogIO sink Operator A class for configuring the ONIX breakout board's analog inputs and outputs. Inputs & Outputs Configures the analog input and output device in the ONIX breakout board. This will schedule analog IO hardware configuration actions that can be applied by a StartAcquisition object prior to data collection. ContextTask The sequence of ContextTask objects on which to apply the analog IO configuration. ContextTask A sequence of ContextTask objects that is identical to source in which each ContextTask has been instructed to apply the analog IO configuration. ContextTask Data Frame Member Type Description AcquisitionClockHz uint Gets the acquisition clock rate in Hz. This describes the frequency of the clock used to drive the acquisition counter which is used to provide the clock counter values in oni.Frame.Clock and its derivative types (e.g. Clock, Clock, etc.) BlockReadSize int Gets the number of bytes read by the device driver access to the read channel. This option allows control over a fundamental trade-off between closed-loop response time and overall bandwidth. A minimal value, which is determined by MaxReadFrameSize, will provide the lowest response latency, so long as data can be cleared from hardware memory fast enough to prevent buffering. Larger values will reduce system call frequency, increase overall bandwidth, and may improve processing performance for high-bandwidth data sources. The optimal value depends on the host computer and hardware configuration and must be determined via testing (e.g. using MemoryMonitorData). BlockWriteSize int Gets the number of bytes that are pre-allocated for writing data to hardware. This value determines the amount of memory pre-allocated for calls to Write(uint, IntPtr, int), Write<T>(uint, T), and Write<T>(uint, T[]). A larger size will reduce the average amount of dynamic memory allocation system calls but increase the cost of each of those calls. The minimum size of this option is determined by MaxWriteFrameSize. The effect on real-timer performance is not as large as that of BlockReadSize. DeviceTable Dictionary<uint, Device> Gets the device table containing the full device hierarchy governed by the internal oni.Context. This dictionary maps a fully-qualified oni.Device.Address to an oni.Device instance. MaxReadFrameSize uint Gets the maximal size of a frame produced by a call to oni.Context.ReadFrame() in bytes. This number is the maximum sized frame that can be produced across every device within the device table that generates data. MaxWriteFrameSize uint Gets the maximal size consumed by a call to Write(uint, IntPtr, int) in bytes. This number is the maximum sized frame that can be consumed across every device within the device table that accepts write data. SystemClockHz uint Gets the system clock rate in Hz. This describes the frequency of the clock governing the controller hardware. Properties Property Type Description Direction0 BreakoutAnalogIODirection Gets or sets the direction of channel 0. Direction1 BreakoutAnalogIODirection Gets or sets the direction of channel 1. Direction2 BreakoutAnalogIODirection Gets or sets the direction of channel 2. Direction3 BreakoutAnalogIODirection Gets or sets the direction of channel 3. Direction4 BreakoutAnalogIODirection Gets or sets the direction of channel 4. Direction5 BreakoutAnalogIODirection Gets or sets the direction of channel 5. Direction6 BreakoutAnalogIODirection Gets or sets the direction of channel 6. Direction7 BreakoutAnalogIODirection Gets or sets the direction of channel 7. Direction8 BreakoutAnalogIODirection Gets or sets the direction of channel 8. Direction9 BreakoutAnalogIODirection Gets or sets the direction of channel 9. Direction10 BreakoutAnalogIODirection Gets or sets the direction of channel 10. Direction11 BreakoutAnalogIODirection Gets or sets the direction of channel 11. Enable bool Gets or sets the device enable state. If set to true, BreakoutAnalogInput will produce data. If set to false, BreakoutAnalogInput will not produce data. InputRange0 BreakoutAnalogIOVoltageRange Gets or sets the input voltage range of channel 0. InputRange1 BreakoutAnalogIOVoltageRange Gets or sets the input voltage range of channel 1. InputRange2 BreakoutAnalogIOVoltageRange Gets or sets the input voltage range of channel 2. InputRange3 BreakoutAnalogIOVoltageRange Gets or sets the input voltage range of channel 3. InputRange4 BreakoutAnalogIOVoltageRange Gets or sets the input voltage range of channel 4. InputRange5 BreakoutAnalogIOVoltageRange Gets or sets the input voltage range of channel 5. InputRange6 BreakoutAnalogIOVoltageRange Gets or sets the input voltage range of channel 6. InputRange7 BreakoutAnalogIOVoltageRange Gets or sets the input voltage range of channel 7. InputRange8 BreakoutAnalogIOVoltageRange Gets or sets the input voltage range of channel 8. InputRange9 BreakoutAnalogIOVoltageRange Gets or sets the input voltage range of channel 9. InputRange10 BreakoutAnalogIOVoltageRange Gets or sets the input voltage range of channel 10. InputRange11 BreakoutAnalogIOVoltageRange Gets or sets the input voltage range of channel 11."
  },
  "api/OpenEphys.Onix.ConfigureBreakoutBoard.html": {
    "href": "api/OpenEphys.Onix.ConfigureBreakoutBoard.html",
    "title": "Class ConfigureBreakoutBoard",
    "keywords": "ConfigureBreakoutBoard sink Operator A class that configures an ONIX breakout board. Inputs & Outputs A class that configures an ONIX breakout board. Properties AnalogIO Property Description Direction0 Gets or sets the direction of channel 0. Direction1 Gets or sets the direction of channel 1. Direction10 Gets or sets the direction of channel 10. Direction11 Gets or sets the direction of channel 11. Direction2 Gets or sets the direction of channel 2. Direction3 Gets or sets the direction of channel 3. Direction4 Gets or sets the direction of channel 4. Direction5 Gets or sets the direction of channel 5. Direction6 Gets or sets the direction of channel 6. Direction7 Gets or sets the direction of channel 7. Direction8 Gets or sets the direction of channel 8. Direction9 Gets or sets the direction of channel 9. Enable Gets or sets the device enable state. If set to true, BreakoutAnalogInput will produce data. If set to false, BreakoutAnalogInput will not produce data. InputRange0 Gets or sets the input voltage range of channel 0. InputRange1 Gets or sets the input voltage range of channel 1. InputRange10 Gets or sets the input voltage range of channel 10. InputRange11 Gets or sets the input voltage range of channel 11. InputRange2 Gets or sets the input voltage range of channel 2. InputRange3 Gets or sets the input voltage range of channel 3. InputRange4 Gets or sets the input voltage range of channel 4. InputRange5 Gets or sets the input voltage range of channel 5. InputRange6 Gets or sets the input voltage range of channel 6. InputRange7 Gets or sets the input voltage range of channel 7. InputRange8 Gets or sets the input voltage range of channel 8. InputRange9 Gets or sets the input voltage range of channel 9. DigitalIO Property Description Enable Gets or sets the device enable state. If set to true, BreakoutDigitalInput will produce data. If set to false, BreakoutDigitalInput will not produce data. Heartbeat Property Description BeatsPerSecond Gets or sets the rate at which beats are produced in Hz. If set to true, a HeartbeatData instance that is linked to this configuration will produce data. If set to false, it will not produce data. Enable Gets or sets the device enable state. If set to true, a HeartbeatData instance that is linked to this configuration will produce data. If set to false, it will not produce data. MemoryMonitor Property Description Enable Gets or sets the device enable state. If set to true, MemoryMonitorData will produce data. If set to false, MemoryMonitorData will not produce data. SamplesPerSecond Gets or sets the frequency at which memory use is recorded in Hz."
  },
  "api/OpenEphys.Onix.ConfigureBreakoutDigitalIO.html": {
    "href": "api/OpenEphys.Onix.ConfigureBreakoutDigitalIO.html",
    "title": "Class ConfigureBreakoutDigitalIO",
    "keywords": "ConfigureBreakoutDigitalIO sink Operator A class for configuring the ONIX breakout board's digital inputs and outputs. Inputs & Outputs Configures the digital input and output device in the ONIX breakout board. This will schedule digital IO hardware configuration actions that can be applied by a StartAcquisition object prior to data collection. ContextTask A sequence of ContextTask instances that hold configuration actions. ContextTask The original sequence modified by adding additional configuration actions required to configure a digital IO device. ContextTask Data Frame Member Type Description AcquisitionClockHz uint Gets the acquisition clock rate in Hz. This describes the frequency of the clock used to drive the acquisition counter which is used to provide the clock counter values in oni.Frame.Clock and its derivative types (e.g. Clock, Clock, etc.) BlockReadSize int Gets the number of bytes read by the device driver access to the read channel. This option allows control over a fundamental trade-off between closed-loop response time and overall bandwidth. A minimal value, which is determined by MaxReadFrameSize, will provide the lowest response latency, so long as data can be cleared from hardware memory fast enough to prevent buffering. Larger values will reduce system call frequency, increase overall bandwidth, and may improve processing performance for high-bandwidth data sources. The optimal value depends on the host computer and hardware configuration and must be determined via testing (e.g. using MemoryMonitorData). BlockWriteSize int Gets the number of bytes that are pre-allocated for writing data to hardware. This value determines the amount of memory pre-allocated for calls to Write(uint, IntPtr, int), Write<T>(uint, T), and Write<T>(uint, T[]). A larger size will reduce the average amount of dynamic memory allocation system calls but increase the cost of each of those calls. The minimum size of this option is determined by MaxWriteFrameSize. The effect on real-timer performance is not as large as that of BlockReadSize. DeviceTable Dictionary<uint, Device> Gets the device table containing the full device hierarchy governed by the internal oni.Context. This dictionary maps a fully-qualified oni.Device.Address to an oni.Device instance. MaxReadFrameSize uint Gets the maximal size of a frame produced by a call to oni.Context.ReadFrame() in bytes. This number is the maximum sized frame that can be produced across every device within the device table that generates data. MaxWriteFrameSize uint Gets the maximal size consumed by a call to Write(uint, IntPtr, int) in bytes. This number is the maximum sized frame that can be consumed across every device within the device table that accepts write data. SystemClockHz uint Gets the system clock rate in Hz. This describes the frequency of the clock governing the controller hardware. Properties Property Type Description Enable bool Gets or sets the device enable state. If set to true, BreakoutDigitalInput will produce data. If set to false, BreakoutDigitalInput will not produce data."
  },
  "api/OpenEphys.Onix.ConfigureHarpSyncInput.html": {
    "href": "api/OpenEphys.Onix.ConfigureHarpSyncInput.html",
    "title": "Class ConfigureHarpSyncInput",
    "keywords": "ConfigureHarpSyncInput sink Operator A class for configuring the ONIX breakout board Harp sync input device. Harp is a standard for asynchronous real-time data acquisition and experimental control in neuroscience. It includes a clock synchronization protocol which allows Harp devices to be connected to a shared clock line and continuously self-synchronize their clocks to a precision of tens of microseconds. This means that all experimental events are timestamped on the same clock and no post-hoc alignment of timing is necessary. The Harp clock signal is transmitted over a serial line with high precision every second. Every time the Harp sync input device in the ONIX breakout board detects a full Harp synchronization packet, a new data frame is emitted pairing the current value of the Harp clock with the local ONIX acquisition clock. Logging the sequence of all Harp synchronization packets can greatly facilitate post-hoc analysis and interpretation of timing signals. For more information see https://harp-tech.org/. Inputs & Outputs Configures a ONIX breakout board Harp sync input device. This will schedule configuration actions to be applied by a StartAcquisition instance prior to data acquisition. ContextTask A sequence of ContextTask instances that hold configuration actions. ContextTask The original sequence modified by adding additional configuration actions required to configure a ONIX breakout board Harp sync input device. ContextTask Data Frame Member Type Description AcquisitionClockHz uint Gets the acquisition clock rate in Hz. This describes the frequency of the clock used to drive the acquisition counter which is used to provide the clock counter values in oni.Frame.Clock and its derivative types (e.g. Clock, Clock, etc.) BlockReadSize int Gets the number of bytes read by the device driver access to the read channel. This option allows control over a fundamental trade-off between closed-loop response time and overall bandwidth. A minimal value, which is determined by MaxReadFrameSize, will provide the lowest response latency, so long as data can be cleared from hardware memory fast enough to prevent buffering. Larger values will reduce system call frequency, increase overall bandwidth, and may improve processing performance for high-bandwidth data sources. The optimal value depends on the host computer and hardware configuration and must be determined via testing (e.g. using MemoryMonitorData). BlockWriteSize int Gets the number of bytes that are pre-allocated for writing data to hardware. This value determines the amount of memory pre-allocated for calls to Write(uint, IntPtr, int), Write<T>(uint, T), and Write<T>(uint, T[]). A larger size will reduce the average amount of dynamic memory allocation system calls but increase the cost of each of those calls. The minimum size of this option is determined by MaxWriteFrameSize. The effect on real-timer performance is not as large as that of BlockReadSize. DeviceTable Dictionary<uint, Device> Gets the device table containing the full device hierarchy governed by the internal oni.Context. This dictionary maps a fully-qualified oni.Device.Address to an oni.Device instance. MaxReadFrameSize uint Gets the maximal size of a frame produced by a call to oni.Context.ReadFrame() in bytes. This number is the maximum sized frame that can be produced across every device within the device table that generates data. MaxWriteFrameSize uint Gets the maximal size consumed by a call to Write(uint, IntPtr, int) in bytes. This number is the maximum sized frame that can be consumed across every device within the device table that accepts write data. SystemClockHz uint Gets the system clock rate in Hz. This describes the frequency of the clock governing the controller hardware. Properties Property Type Description Enable bool Gets or sets a value specifying whether the Harp sync input device is enabled. Source HarpSyncSource Gets or sets a value specifying the physical Harp clock input source. In standard ONIX breakout boards, the Harp mini-jack connector on the side of the breakout is configured to receive Harp clock synchronization signals. In early access versions of the ONIX breakout board, the Harp mini-jack connector is configured for output only, so a special adapter is needed to transmit the Harp clock synchronization signal to the breakout clock input zero."
  },
  "api/OpenEphys.Onix.ConfigureHeadstage64.html": {
    "href": "api/OpenEphys.Onix.ConfigureHeadstage64.html",
    "title": "Class ConfigureHeadstage64",
    "keywords": "ConfigureHeadstage64 sink Operator A class that configures an ONIX headstage-64 in the specified port. Inputs & Outputs A class that configures an ONIX headstage-64 in the specified port. Properties Bno055 Property Description Enable Gets or sets the device enable state. If set to true, a Bno055Data instance that is linked to this configuration will produce data. If set to false, it will not produce data. Rhd2164 Property Description AnalogHighCutoff Gets or sets the high cutoff frequency of the analog (pre-ADC) bandpass filter. AnalogLowCutoff Gets or sets the low cutoff frequency of the analog (pre-ADC) bandpass filter. DspCutoff Gets or sets the cutoff frequency for the digital (post-ADC) high-pass filter used for amplifier offset removal. Enable Gets or sets the device enable state. If set to true, a Rhd2164Data instance that is linked to this configuration will produce data. If set to false, it will not produce data. TS4231 Property Description Enable Gets or sets the device enable state. If set to true, a TS4231V1Data instance that is linked to this configuration will produce data. If set to false, it will not produce data."
  },
  "api/OpenEphys.Onix.ConfigureHeadstage64ElectricalStimulator.html": {
    "href": "api/OpenEphys.Onix.ConfigureHeadstage64ElectricalStimulator.html",
    "title": "Class ConfigureHeadstage64ElectricalStimulator",
    "keywords": "ConfigureHeadstage64ElectricalStimulator sink Operator A class that configures a headstage-64 onboard electrical stimulator. This configuration class can be linked to a Headstage64ElectricalStimulatorTrigger instance to deliver current controlled electrical micro-stimulation through a contact on the probe connector on the bottom of the headstage or the corresponding contact on a compatible electrode interface board. Inputs & Outputs Configure a headstage-64 onboard electrical stimulator. This will schedule configuration actions to be applied by a StartAcquisition instance prior to data acquisition. ContextTask A sequence of ContextTask instances that holds configuration actions. ContextTask The original sequence modified by adding additional configuration actions required to configure a headstage-64 onboard electrical stimulator. ContextTask Data Frame Member Type Description AcquisitionClockHz uint Gets the acquisition clock rate in Hz. This describes the frequency of the clock used to drive the acquisition counter which is used to provide the clock counter values in oni.Frame.Clock and its derivative types (e.g. Clock, Clock, etc.) BlockReadSize int Gets the number of bytes read by the device driver access to the read channel. This option allows control over a fundamental trade-off between closed-loop response time and overall bandwidth. A minimal value, which is determined by MaxReadFrameSize, will provide the lowest response latency, so long as data can be cleared from hardware memory fast enough to prevent buffering. Larger values will reduce system call frequency, increase overall bandwidth, and may improve processing performance for high-bandwidth data sources. The optimal value depends on the host computer and hardware configuration and must be determined via testing (e.g. using MemoryMonitorData). BlockWriteSize int Gets the number of bytes that are pre-allocated for writing data to hardware. This value determines the amount of memory pre-allocated for calls to Write(uint, IntPtr, int), Write<T>(uint, T), and Write<T>(uint, T[]). A larger size will reduce the average amount of dynamic memory allocation system calls but increase the cost of each of those calls. The minimum size of this option is determined by MaxWriteFrameSize. The effect on real-timer performance is not as large as that of BlockReadSize. DeviceTable Dictionary<uint, Device> Gets the device table containing the full device hierarchy governed by the internal oni.Context. This dictionary maps a fully-qualified oni.Device.Address to an oni.Device instance. MaxReadFrameSize uint Gets the maximal size of a frame produced by a call to oni.Context.ReadFrame() in bytes. This number is the maximum sized frame that can be produced across every device within the device table that generates data. MaxWriteFrameSize uint Gets the maximal size consumed by a call to Write(uint, IntPtr, int) in bytes. This number is the maximum sized frame that can be consumed across every device within the device table that accepts write data. SystemClockHz uint Gets the system clock rate in Hz. This describes the frequency of the clock governing the controller hardware."
  },
  "api/OpenEphys.Onix.ConfigureHeadstage64OpticalStimulator.html": {
    "href": "api/OpenEphys.Onix.ConfigureHeadstage64OpticalStimulator.html",
    "title": "Class ConfigureHeadstage64OpticalStimulator",
    "keywords": "ConfigureHeadstage64OpticalStimulator sink Operator A class that configures a headstage-64 dual-channel optical stimulator. This configuration class can be linked to a Headstage64OpticalStimulatorTrigger instance to drive current through laser diodes or LEDs connected to two contacts on the probe connector on the bottom of the headstage or the corresponding contacts on a compatible electrode interface board. Inputs & Outputs Configure a headstage-64 dual-channel optical stimulator. This will schedule configuration actions to be applied by a StartAcquisition instance prior to data acquisition. ContextTask A sequence of ContextTask instances that holds configuration actions. ContextTask The original sequence modified by adding additional configuration actions required to configure a headstage-64 dual-channel optical stimulator. ContextTask Data Frame Member Type Description AcquisitionClockHz uint Gets the acquisition clock rate in Hz. This describes the frequency of the clock used to drive the acquisition counter which is used to provide the clock counter values in oni.Frame.Clock and its derivative types (e.g. Clock, Clock, etc.) BlockReadSize int Gets the number of bytes read by the device driver access to the read channel. This option allows control over a fundamental trade-off between closed-loop response time and overall bandwidth. A minimal value, which is determined by MaxReadFrameSize, will provide the lowest response latency, so long as data can be cleared from hardware memory fast enough to prevent buffering. Larger values will reduce system call frequency, increase overall bandwidth, and may improve processing performance for high-bandwidth data sources. The optimal value depends on the host computer and hardware configuration and must be determined via testing (e.g. using MemoryMonitorData). BlockWriteSize int Gets the number of bytes that are pre-allocated for writing data to hardware. This value determines the amount of memory pre-allocated for calls to Write(uint, IntPtr, int), Write<T>(uint, T), and Write<T>(uint, T[]). A larger size will reduce the average amount of dynamic memory allocation system calls but increase the cost of each of those calls. The minimum size of this option is determined by MaxWriteFrameSize. The effect on real-timer performance is not as large as that of BlockReadSize. DeviceTable Dictionary<uint, Device> Gets the device table containing the full device hierarchy governed by the internal oni.Context. This dictionary maps a fully-qualified oni.Device.Address to an oni.Device instance. MaxReadFrameSize uint Gets the maximal size of a frame produced by a call to oni.Context.ReadFrame() in bytes. This number is the maximum sized frame that can be produced across every device within the device table that generates data. MaxWriteFrameSize uint Gets the maximal size consumed by a call to Write(uint, IntPtr, int) in bytes. This number is the maximum sized frame that can be consumed across every device within the device table that accepts write data. SystemClockHz uint Gets the system clock rate in Hz. This describes the frequency of the clock governing the controller hardware."
  },
  "api/OpenEphys.Onix.ConfigureHeartbeat.html": {
    "href": "api/OpenEphys.Onix.ConfigureHeartbeat.html",
    "title": "Class ConfigureHeartbeat",
    "keywords": "ConfigureHeartbeat sink Operator A class for configuring a heartbeat device. This configuration class can be linked to a HeartbeatData instance to stream heartbeats from the acquisition system. Inputs & Outputs Configures a heartbeat device. This will schedule configuration actions to be applied by a StartAcquisition instance prior to data acquisition. ContextTask A sequence of ContextTask instances that holds configuration actions. ContextTask The original sequence modified by adding additional configuration actions required to configure a heartbeat device./> ContextTask Data Frame Member Type Description AcquisitionClockHz uint Gets the acquisition clock rate in Hz. This describes the frequency of the clock used to drive the acquisition counter which is used to provide the clock counter values in oni.Frame.Clock and its derivative types (e.g. Clock, Clock, etc.) BlockReadSize int Gets the number of bytes read by the device driver access to the read channel. This option allows control over a fundamental trade-off between closed-loop response time and overall bandwidth. A minimal value, which is determined by MaxReadFrameSize, will provide the lowest response latency, so long as data can be cleared from hardware memory fast enough to prevent buffering. Larger values will reduce system call frequency, increase overall bandwidth, and may improve processing performance for high-bandwidth data sources. The optimal value depends on the host computer and hardware configuration and must be determined via testing (e.g. using MemoryMonitorData). BlockWriteSize int Gets the number of bytes that are pre-allocated for writing data to hardware. This value determines the amount of memory pre-allocated for calls to Write(uint, IntPtr, int), Write<T>(uint, T), and Write<T>(uint, T[]). A larger size will reduce the average amount of dynamic memory allocation system calls but increase the cost of each of those calls. The minimum size of this option is determined by MaxWriteFrameSize. The effect on real-timer performance is not as large as that of BlockReadSize. DeviceTable Dictionary<uint, Device> Gets the device table containing the full device hierarchy governed by the internal oni.Context. This dictionary maps a fully-qualified oni.Device.Address to an oni.Device instance. MaxReadFrameSize uint Gets the maximal size of a frame produced by a call to oni.Context.ReadFrame() in bytes. This number is the maximum sized frame that can be produced across every device within the device table that generates data. MaxWriteFrameSize uint Gets the maximal size consumed by a call to Write(uint, IntPtr, int) in bytes. This number is the maximum sized frame that can be consumed across every device within the device table that accepts write data. SystemClockHz uint Gets the system clock rate in Hz. This describes the frequency of the clock governing the controller hardware. Properties Property Type Description BeatsPerSecond uint Gets or sets the rate at which beats are produced in Hz. If set to true, a HeartbeatData instance that is linked to this configuration will produce data. If set to false, it will not produce data. Enable bool Gets or sets the device enable state. If set to true, a HeartbeatData instance that is linked to this configuration will produce data. If set to false, it will not produce data."
  },
  "api/OpenEphys.Onix.ConfigureLoadTester.html": {
    "href": "api/OpenEphys.Onix.ConfigureLoadTester.html",
    "title": "Class ConfigureLoadTester",
    "keywords": "ConfigureLoadTester sink Operator A class for configuring a load testing device. The load tester device can be configured to produce data at user-settable size and rate to stress test various communication links and test closed-loop response latency. Inputs & Outputs Configures a load testing device. This will schedule configuration actions to be applied by a StartAcquisition instance prior to data acquisition. ContextTask A sequence of ContextTask instances that hold configuration actions. ContextTask The original sequence modified by adding additional configuration actions required to configure a load testing device. ContextTask Data Frame Member Type Description AcquisitionClockHz uint Gets the acquisition clock rate in Hz. This describes the frequency of the clock used to drive the acquisition counter which is used to provide the clock counter values in oni.Frame.Clock and its derivative types (e.g. Clock, Clock, etc.) BlockReadSize int Gets the number of bytes read by the device driver access to the read channel. This option allows control over a fundamental trade-off between closed-loop response time and overall bandwidth. A minimal value, which is determined by MaxReadFrameSize, will provide the lowest response latency, so long as data can be cleared from hardware memory fast enough to prevent buffering. Larger values will reduce system call frequency, increase overall bandwidth, and may improve processing performance for high-bandwidth data sources. The optimal value depends on the host computer and hardware configuration and must be determined via testing (e.g. using MemoryMonitorData). BlockWriteSize int Gets the number of bytes that are pre-allocated for writing data to hardware. This value determines the amount of memory pre-allocated for calls to Write(uint, IntPtr, int), Write<T>(uint, T), and Write<T>(uint, T[]). A larger size will reduce the average amount of dynamic memory allocation system calls but increase the cost of each of those calls. The minimum size of this option is determined by MaxWriteFrameSize. The effect on real-timer performance is not as large as that of BlockReadSize. DeviceTable Dictionary<uint, Device> Gets the device table containing the full device hierarchy governed by the internal oni.Context. This dictionary maps a fully-qualified oni.Device.Address to an oni.Device instance. MaxReadFrameSize uint Gets the maximal size of a frame produced by a call to oni.Context.ReadFrame() in bytes. This number is the maximum sized frame that can be produced across every device within the device table that generates data. MaxWriteFrameSize uint Gets the maximal size consumed by a call to Write(uint, IntPtr, int) in bytes. This number is the maximum sized frame that can be consumed across every device within the device table that accepts write data. SystemClockHz uint Gets the system clock rate in Hz. This describes the frequency of the clock governing the controller hardware. Properties Property Type Description Enable bool Gets or sets a value specifying whether the load testing device is enabled. FramesPerSecond uint Gets or sets a value specifying the rate at which frames are produced, in Hz. ReceivedWords uint Gets or sets the number of repetitions of the 16-bit unsigned integer 42 sent with each read-frame. TransmittedWords uint Gets or sets the number of repetitions of the 32-bit integer 42 sent with each write frame."
  },
  "api/OpenEphys.Onix.ConfigureMemoryMonitor.html": {
    "href": "api/OpenEphys.Onix.ConfigureMemoryMonitor.html",
    "title": "Class ConfigureMemoryMonitor",
    "keywords": "ConfigureMemoryMonitor sink Operator A class for configuring a hardware memory monitor device. The memory monitor produces periodic snapshots of the system's first in, first out (FIFO) data buffer. This can be useful for: Ensuring that data is being read by the host PC quickly enough to prevent real-time delays or overflows. In the case that the PC is not keeping up with data collection, FIFO memory use will increase monotonically. Tuning the value of ReadSize to optimize real-time performance. For optimal real-time performance, ReadSize should be as small as possible and the FIFO should be bypassed (memory usage should remain at 0). However, these requirements are in conflict. The memory monitor provides a way to find the minimal value of value of ReadSize that does not result in excessive FIFO data buffering. This tradeoff will depend on the bandwidth of data being acquired, the performance of the host PC, and downstream real-time processing. Inputs & Outputs Configures a memory monitor device. This will schedule configuration actions to be applied by a StartAcquisition instance prior to data acquisition. ContextTask A sequence of ContextTask instances that holds configuration actions. ContextTask The original sequence modified by adding additional configuration actions required to configure a memory monitor device./> ContextTask Data Frame Member Type Description AcquisitionClockHz uint Gets the acquisition clock rate in Hz. This describes the frequency of the clock used to drive the acquisition counter which is used to provide the clock counter values in oni.Frame.Clock and its derivative types (e.g. Clock, Clock, etc.) BlockReadSize int Gets the number of bytes read by the device driver access to the read channel. This option allows control over a fundamental trade-off between closed-loop response time and overall bandwidth. A minimal value, which is determined by MaxReadFrameSize, will provide the lowest response latency, so long as data can be cleared from hardware memory fast enough to prevent buffering. Larger values will reduce system call frequency, increase overall bandwidth, and may improve processing performance for high-bandwidth data sources. The optimal value depends on the host computer and hardware configuration and must be determined via testing (e.g. using MemoryMonitorData). BlockWriteSize int Gets the number of bytes that are pre-allocated for writing data to hardware. This value determines the amount of memory pre-allocated for calls to Write(uint, IntPtr, int), Write<T>(uint, T), and Write<T>(uint, T[]). A larger size will reduce the average amount of dynamic memory allocation system calls but increase the cost of each of those calls. The minimum size of this option is determined by MaxWriteFrameSize. The effect on real-timer performance is not as large as that of BlockReadSize. DeviceTable Dictionary<uint, Device> Gets the device table containing the full device hierarchy governed by the internal oni.Context. This dictionary maps a fully-qualified oni.Device.Address to an oni.Device instance. MaxReadFrameSize uint Gets the maximal size of a frame produced by a call to oni.Context.ReadFrame() in bytes. This number is the maximum sized frame that can be produced across every device within the device table that generates data. MaxWriteFrameSize uint Gets the maximal size consumed by a call to Write(uint, IntPtr, int) in bytes. This number is the maximum sized frame that can be consumed across every device within the device table that accepts write data. SystemClockHz uint Gets the system clock rate in Hz. This describes the frequency of the clock governing the controller hardware. Properties Property Type Description Enable bool Gets or sets the device enable state. If set to true, MemoryMonitorData will produce data. If set to false, MemoryMonitorData will not produce data. SamplesPerSecond uint Gets or sets the frequency at which memory use is recorded in Hz."
  },
  "api/OpenEphys.Onix.ConfigureNeuropixelsV1e.html": {
    "href": "api/OpenEphys.Onix.ConfigureNeuropixelsV1e.html",
    "title": "Class ConfigureNeuropixelsV1e",
    "keywords": "ConfigureNeuropixelsV1e sink Operator A class that configures a NeuropixelsV1e device. Inputs & Outputs Configures a NeuropixelsV1e device. This will schedule configuration actions to be applied by a StartAcquisition node prior to data acquisition. ContextTask A sequence of ContextTask that holds all configuration actions. ContextTask The original sequence with the side effect of an additional configuration action to configure a NeuropixelsV1e device. ContextTask Data Frame Member Type Description AcquisitionClockHz uint Gets the acquisition clock rate in Hz. This describes the frequency of the clock used to drive the acquisition counter which is used to provide the clock counter values in oni.Frame.Clock and its derivative types (e.g. Clock, Clock, etc.) BlockReadSize int Gets the number of bytes read by the device driver access to the read channel. This option allows control over a fundamental trade-off between closed-loop response time and overall bandwidth. A minimal value, which is determined by MaxReadFrameSize, will provide the lowest response latency, so long as data can be cleared from hardware memory fast enough to prevent buffering. Larger values will reduce system call frequency, increase overall bandwidth, and may improve processing performance for high-bandwidth data sources. The optimal value depends on the host computer and hardware configuration and must be determined via testing (e.g. using MemoryMonitorData). BlockWriteSize int Gets the number of bytes that are pre-allocated for writing data to hardware. This value determines the amount of memory pre-allocated for calls to Write(uint, IntPtr, int), Write<T>(uint, T), and Write<T>(uint, T[]). A larger size will reduce the average amount of dynamic memory allocation system calls but increase the cost of each of those calls. The minimum size of this option is determined by MaxWriteFrameSize. The effect on real-timer performance is not as large as that of BlockReadSize. DeviceTable Dictionary<uint, Device> Gets the device table containing the full device hierarchy governed by the internal oni.Context. This dictionary maps a fully-qualified oni.Device.Address to an oni.Device instance. MaxReadFrameSize uint Gets the maximal size of a frame produced by a call to oni.Context.ReadFrame() in bytes. This number is the maximum sized frame that can be produced across every device within the device table that generates data. MaxWriteFrameSize uint Gets the maximal size consumed by a call to Write(uint, IntPtr, int) in bytes. This number is the maximum sized frame that can be consumed across every device within the device table that accepts write data. SystemClockHz uint Gets the system clock rate in Hz. This describes the frequency of the clock governing the controller hardware. Properties Property Type Description AdcCalibrationFile string Gets or sets the path to the ADC calibration file. Each probe must be provided with an ADC calibration file that contains calibration data specific to each probe. This file is mandatory for accurate recordings. Enable bool Gets or sets the device enable state. If set to true, NeuropixelsV1eData will produce data. If set to false, NeuropixelsV1eData will not produce data. EnableLed bool Gets or sets the LED enable state. If true, the headstage LED will turn on during data acquisition. If false, the LED will not turn on. GainCalibrationFile string Gets or sets the path to the gain calibration file. Each probe must be provided with a gain calibration file that contains calibration data specific to each probe. This file is mandatory for accurate recordings. LfpAmplifierGain NeuropixelsV1Gain Gets or sets the amplifier gain for the LFP-band. The LFP band is from 0.5 to 500 Hz. Reference NeuropixelsV1ReferenceSource Gets or sets the reference for all electrodes. All electrodes are set to the same reference, which can be either External or Tip. Setting to External will use the external reference, while Tip sets the reference to the electrode at the tip of the probe. SpikeAmplifierGain NeuropixelsV1Gain Gets or sets the amplifier gain for the spike-band. The spike-band is from DC to 10 kHz if SpikeFilter is set to false, while the spike-band is from 300 Hz to 10 kHz if SpikeFilter is set to true. SpikeFilter bool Gets or sets the state of the spike-band filter. If set to true, the spike-band has a 300 Hz high-pass filter which will be activated. If set to false, the high-pass filter will not to be activated."
  },
  "api/OpenEphys.Onix.ConfigureNeuropixelsV1eBno055.html": {
    "href": "api/OpenEphys.Onix.ConfigureNeuropixelsV1eBno055.html",
    "title": "Class ConfigureNeuropixelsV1eBno055",
    "keywords": "ConfigureNeuropixelsV1eBno055 sink Operator A class that configures a NeuropixelsV1eBno055 device. Inputs & Outputs Configures a NeuropixelsV1eBno055 device. This will schedule configuration actions to be applied by a StartAcquisition node prior to data acquisition. ContextTask A sequence of ContextTask that holds all configuration actions. ContextTask The original sequence with the side effect of an additional configuration action to configure a NeuropixelsV1eBno055 device. ContextTask Data Frame Member Type Description AcquisitionClockHz uint Gets the acquisition clock rate in Hz. This describes the frequency of the clock used to drive the acquisition counter which is used to provide the clock counter values in oni.Frame.Clock and its derivative types (e.g. Clock, Clock, etc.) BlockReadSize int Gets the number of bytes read by the device driver access to the read channel. This option allows control over a fundamental trade-off between closed-loop response time and overall bandwidth. A minimal value, which is determined by MaxReadFrameSize, will provide the lowest response latency, so long as data can be cleared from hardware memory fast enough to prevent buffering. Larger values will reduce system call frequency, increase overall bandwidth, and may improve processing performance for high-bandwidth data sources. The optimal value depends on the host computer and hardware configuration and must be determined via testing (e.g. using MemoryMonitorData). BlockWriteSize int Gets the number of bytes that are pre-allocated for writing data to hardware. This value determines the amount of memory pre-allocated for calls to Write(uint, IntPtr, int), Write<T>(uint, T), and Write<T>(uint, T[]). A larger size will reduce the average amount of dynamic memory allocation system calls but increase the cost of each of those calls. The minimum size of this option is determined by MaxWriteFrameSize. The effect on real-timer performance is not as large as that of BlockReadSize. DeviceTable Dictionary<uint, Device> Gets the device table containing the full device hierarchy governed by the internal oni.Context. This dictionary maps a fully-qualified oni.Device.Address to an oni.Device instance. MaxReadFrameSize uint Gets the maximal size of a frame produced by a call to oni.Context.ReadFrame() in bytes. This number is the maximum sized frame that can be produced across every device within the device table that generates data. MaxWriteFrameSize uint Gets the maximal size consumed by a call to Write(uint, IntPtr, int) in bytes. This number is the maximum sized frame that can be consumed across every device within the device table that accepts write data. SystemClockHz uint Gets the system clock rate in Hz. This describes the frequency of the clock governing the controller hardware. Properties Property Type Description Enable bool Gets or sets the device enable state. If set to true, NeuropixelsV1eBno055Data will produce data. If set to false, NeuropixelsV1eBno055Data will not produce data."
  },
  "api/OpenEphys.Onix.ConfigureNeuropixelsV1eHeadstage.html": {
    "href": "api/OpenEphys.Onix.ConfigureNeuropixelsV1eHeadstage.html",
    "title": "Class ConfigureNeuropixelsV1eHeadstage",
    "keywords": "ConfigureNeuropixelsV1eHeadstage sink Operator A class that configures a NeuropixelsV1e headstage. Inputs & Outputs A class that configures a NeuropixelsV1e headstage. Properties Bno055 Property Description Enable Gets or sets the device enable state. If set to true, NeuropixelsV1eBno055Data will produce data. If set to false, NeuropixelsV1eBno055Data will not produce data. NeuropixelsV1e Property Description AdcCalibrationFile Gets or sets the path to the ADC calibration file. Each probe must be provided with an ADC calibration file that contains calibration data specific to each probe. This file is mandatory for accurate recordings. Enable Gets or sets the device enable state. If set to true, NeuropixelsV1eData will produce data. If set to false, NeuropixelsV1eData will not produce data. EnableLed Gets or sets the LED enable state. If true, the headstage LED will turn on during data acquisition. If false, the LED will not turn on. GainCalibrationFile Gets or sets the path to the gain calibration file. Each probe must be provided with a gain calibration file that contains calibration data specific to each probe. This file is mandatory for accurate recordings. LfpAmplifierGain Gets or sets the amplifier gain for the LFP-band. The LFP band is from 0.5 to 500 Hz. Reference Gets or sets the reference for all electrodes. All electrodes are set to the same reference, which can be either External or Tip. Setting to External will use the external reference, while Tip sets the reference to the electrode at the tip of the probe. SpikeAmplifierGain Gets or sets the amplifier gain for the spike-band. The spike-band is from DC to 10 kHz if SpikeFilter is set to false, while the spike-band is from 300 Hz to 10 kHz if SpikeFilter is set to true. SpikeFilter Gets or sets the state of the spike-band filter. If set to true, the spike-band has a 300 Hz high-pass filter which will be activated. If set to false, the high-pass filter will not to be activated."
  },
  "api/OpenEphys.Onix.ConfigureNeuropixelsV2e.html": {
    "href": "api/OpenEphys.Onix.ConfigureNeuropixelsV2e.html",
    "title": "Class ConfigureNeuropixelsV2e",
    "keywords": "ConfigureNeuropixelsV2e sink Operator A class that configures a NeuropixelsV2e device. Inputs & Outputs Configures a NeuropixelsV2e device. This will schedule configuration actions to be applied by a StartAcquisition node prior to data acquisition. ContextTask A sequence of ContextTask that holds all configuration actions. ContextTask The original sequence with the side effect of an additional configuration action to configure a NeuropixelsV2e device. ContextTask Data Frame Member Type Description AcquisitionClockHz uint Gets the acquisition clock rate in Hz. This describes the frequency of the clock used to drive the acquisition counter which is used to provide the clock counter values in oni.Frame.Clock and its derivative types (e.g. Clock, Clock, etc.) BlockReadSize int Gets the number of bytes read by the device driver access to the read channel. This option allows control over a fundamental trade-off between closed-loop response time and overall bandwidth. A minimal value, which is determined by MaxReadFrameSize, will provide the lowest response latency, so long as data can be cleared from hardware memory fast enough to prevent buffering. Larger values will reduce system call frequency, increase overall bandwidth, and may improve processing performance for high-bandwidth data sources. The optimal value depends on the host computer and hardware configuration and must be determined via testing (e.g. using MemoryMonitorData). BlockWriteSize int Gets the number of bytes that are pre-allocated for writing data to hardware. This value determines the amount of memory pre-allocated for calls to Write(uint, IntPtr, int), Write<T>(uint, T), and Write<T>(uint, T[]). A larger size will reduce the average amount of dynamic memory allocation system calls but increase the cost of each of those calls. The minimum size of this option is determined by MaxWriteFrameSize. The effect on real-timer performance is not as large as that of BlockReadSize. DeviceTable Dictionary<uint, Device> Gets the device table containing the full device hierarchy governed by the internal oni.Context. This dictionary maps a fully-qualified oni.Device.Address to an oni.Device instance. MaxReadFrameSize uint Gets the maximal size of a frame produced by a call to oni.Context.ReadFrame() in bytes. This number is the maximum sized frame that can be produced across every device within the device table that generates data. MaxWriteFrameSize uint Gets the maximal size consumed by a call to Write(uint, IntPtr, int) in bytes. This number is the maximum sized frame that can be consumed across every device within the device table that accepts write data. SystemClockHz uint Gets the system clock rate in Hz. This describes the frequency of the clock governing the controller hardware. A class that configures a NeuropixelsV2e device. Properties ProbeConfigurationA Property Description ChannelMap Gets the existing channel map listing all currently enabled electrodes. The channel map will always be 384 channels, and will return the 384 enabled electrodes. Reference Gets or sets the reference for all electrodes. All electrodes are set to the same reference, which can be External or any of the tip references (Tip1, Tip2, etc.). Setting to External will use the external reference, while Tip1 sets the reference to the electrode at the tip of the first shank. ProbeConfigurationB Property Description ChannelMap Gets the existing channel map listing all currently enabled electrodes. The channel map will always be 384 channels, and will return the 384 enabled electrodes. Reference Gets or sets the reference for all electrodes. All electrodes are set to the same reference, which can be External or any of the tip references (Tip1, Tip2, etc.). Setting to External will use the external reference, while Tip1 sets the reference to the electrode at the tip of the first shank."
  },
  "api/OpenEphys.Onix.ConfigureNeuropixelsV2eBeta.html": {
    "href": "api/OpenEphys.Onix.ConfigureNeuropixelsV2eBeta.html",
    "title": "Class ConfigureNeuropixelsV2eBeta",
    "keywords": "ConfigureNeuropixelsV2eBeta sink Operator A class that configures a NeuropixelsV2eBeta device. Inputs & Outputs Configures a NeuropixelsV2eBeta device. This will schedule configuration actions to be applied by a StartAcquisition instance prior to data acquisition. ContextTask A sequence of ContextTask instances that holds configuration actions. ContextTask The original sequence modified by adding additional configuration actions required to configure a NeuropixelsV2eBeta device./> ContextTask Data Frame Member Type Description AcquisitionClockHz uint Gets the acquisition clock rate in Hz. This describes the frequency of the clock used to drive the acquisition counter which is used to provide the clock counter values in oni.Frame.Clock and its derivative types (e.g. Clock, Clock, etc.) BlockReadSize int Gets the number of bytes read by the device driver access to the read channel. This option allows control over a fundamental trade-off between closed-loop response time and overall bandwidth. A minimal value, which is determined by MaxReadFrameSize, will provide the lowest response latency, so long as data can be cleared from hardware memory fast enough to prevent buffering. Larger values will reduce system call frequency, increase overall bandwidth, and may improve processing performance for high-bandwidth data sources. The optimal value depends on the host computer and hardware configuration and must be determined via testing (e.g. using MemoryMonitorData). BlockWriteSize int Gets the number of bytes that are pre-allocated for writing data to hardware. This value determines the amount of memory pre-allocated for calls to Write(uint, IntPtr, int), Write<T>(uint, T), and Write<T>(uint, T[]). A larger size will reduce the average amount of dynamic memory allocation system calls but increase the cost of each of those calls. The minimum size of this option is determined by MaxWriteFrameSize. The effect on real-timer performance is not as large as that of BlockReadSize. DeviceTable Dictionary<uint, Device> Gets the device table containing the full device hierarchy governed by the internal oni.Context. This dictionary maps a fully-qualified oni.Device.Address to an oni.Device instance. MaxReadFrameSize uint Gets the maximal size of a frame produced by a call to oni.Context.ReadFrame() in bytes. This number is the maximum sized frame that can be produced across every device within the device table that generates data. MaxWriteFrameSize uint Gets the maximal size consumed by a call to Write(uint, IntPtr, int) in bytes. This number is the maximum sized frame that can be consumed across every device within the device table that accepts write data. SystemClockHz uint Gets the system clock rate in Hz. This describes the frequency of the clock governing the controller hardware. A class that configures a NeuropixelsV2eBeta device. Properties ProbeConfigurationA Property Description ChannelMap Gets the existing channel map listing all currently enabled electrodes. The channel map will always be 384 channels, and will return the 384 enabled electrodes. Reference Gets or sets the reference for all electrodes. All electrodes are set to the same reference, which can be External or any of the tip references (Tip1, Tip2, etc.). Setting to External will use the external reference, while Tip1 sets the reference to the electrode at the tip of the first shank. ProbeConfigurationB Property Description ChannelMap Gets the existing channel map listing all currently enabled electrodes. The channel map will always be 384 channels, and will return the 384 enabled electrodes. Reference Gets or sets the reference for all electrodes. All electrodes are set to the same reference, which can be External or any of the tip references (Tip1, Tip2, etc.). Setting to External will use the external reference, while Tip1 sets the reference to the electrode at the tip of the first shank."
  },
  "api/OpenEphys.Onix.ConfigureNeuropixelsV2eBetaHeadstage.html": {
    "href": "api/OpenEphys.Onix.ConfigureNeuropixelsV2eBetaHeadstage.html",
    "title": "Class ConfigureNeuropixelsV2eBetaHeadstage",
    "keywords": "ConfigureNeuropixelsV2eBetaHeadstage sink Operator A class that configures a NeuropixelsV2eBeta headstage. Inputs & Outputs A class that configures a NeuropixelsV2eBeta headstage. Properties Bno055 Property Description Enable Gets or sets the device enable state. If set to true, NeuropixelsV2eBno055Data will produce data. If set to false, NeuropixelsV2eBno055Data will not produce data. NeuropixelsV2eBeta Property Description Enable Gets or sets the device enable state. If set to true, NeuropixelsV2eBetaData will produce data. If set to false, NeuropixelsV2eBetaData will not produce data. EnableLed Gets or sets the LED enable state. If true, the headstage LED will turn on during data acquisition. If false, the LED will not turn on. GainCalibrationFileA Gets or sets the path to the gain calibration file for Probe A. Each probe must be provided with a gain calibration file that contains calibration data specific to each probe. This file is mandatory for accurate recordings. GainCalibrationFileB Gets or sets the path to the gain calibration file for Probe B. Each probe must be provided with a gain calibration file that contains calibration data specific to each probe. This file is mandatory for accurate recordings. ProbeConfigurationA Gets or sets the electrode configuration for Probe A. ProbeConfigurationB Gets or sets the electrode configuration for Probe B."
  },
  "api/OpenEphys.Onix.ConfigureNeuropixelsV2eBno055.html": {
    "href": "api/OpenEphys.Onix.ConfigureNeuropixelsV2eBno055.html",
    "title": "Class ConfigureNeuropixelsV2eBno055",
    "keywords": "ConfigureNeuropixelsV2eBno055 sink Operator A class that configures a NeuropixelsV2eBno055 device. Inputs & Outputs Configures a NeuropixelsV2eBno055 device. This will schedule configuration actions to be applied by a StartAcquisition node prior to data acquisition. ContextTask A sequence of ContextTask that holds all configuration actions. ContextTask The original sequence with the side effect of an additional configuration action to configure a NeuropixelsV2eBno055 device. ContextTask Data Frame Member Type Description AcquisitionClockHz uint Gets the acquisition clock rate in Hz. This describes the frequency of the clock used to drive the acquisition counter which is used to provide the clock counter values in oni.Frame.Clock and its derivative types (e.g. Clock, Clock, etc.) BlockReadSize int Gets the number of bytes read by the device driver access to the read channel. This option allows control over a fundamental trade-off between closed-loop response time and overall bandwidth. A minimal value, which is determined by MaxReadFrameSize, will provide the lowest response latency, so long as data can be cleared from hardware memory fast enough to prevent buffering. Larger values will reduce system call frequency, increase overall bandwidth, and may improve processing performance for high-bandwidth data sources. The optimal value depends on the host computer and hardware configuration and must be determined via testing (e.g. using MemoryMonitorData). BlockWriteSize int Gets the number of bytes that are pre-allocated for writing data to hardware. This value determines the amount of memory pre-allocated for calls to Write(uint, IntPtr, int), Write<T>(uint, T), and Write<T>(uint, T[]). A larger size will reduce the average amount of dynamic memory allocation system calls but increase the cost of each of those calls. The minimum size of this option is determined by MaxWriteFrameSize. The effect on real-timer performance is not as large as that of BlockReadSize. DeviceTable Dictionary<uint, Device> Gets the device table containing the full device hierarchy governed by the internal oni.Context. This dictionary maps a fully-qualified oni.Device.Address to an oni.Device instance. MaxReadFrameSize uint Gets the maximal size of a frame produced by a call to oni.Context.ReadFrame() in bytes. This number is the maximum sized frame that can be produced across every device within the device table that generates data. MaxWriteFrameSize uint Gets the maximal size consumed by a call to Write(uint, IntPtr, int) in bytes. This number is the maximum sized frame that can be consumed across every device within the device table that accepts write data. SystemClockHz uint Gets the system clock rate in Hz. This describes the frequency of the clock governing the controller hardware. Properties Property Type Description Enable bool Gets or sets the device enable state. If set to true, NeuropixelsV2eBno055Data will produce data. If set to false, NeuropixelsV2eBno055Data will not produce data."
  },
  "api/OpenEphys.Onix.ConfigureNeuropixelsV2eHeadstage.html": {
    "href": "api/OpenEphys.Onix.ConfigureNeuropixelsV2eHeadstage.html",
    "title": "Class ConfigureNeuropixelsV2eHeadstage",
    "keywords": "ConfigureNeuropixelsV2eHeadstage sink Operator A class that configures a NeuropixelsV2e headstage. Inputs & Outputs A class that configures a NeuropixelsV2e headstage. Properties Bno055 Property Description Enable Gets or sets the device enable state. If set to true, NeuropixelsV2eBno055Data will produce data. If set to false, NeuropixelsV2eBno055Data will not produce data. NeuropixelsV2e Property Description Enable Gets or sets the device enable state. If set to true, NeuropixelsV2eData will produce data. If set to false, NeuropixelsV2eData will not produce data. GainCalibrationFileA Gets or sets the path to the gain calibration file for Probe A. Each probe must be provided with a gain calibration file that contains calibration data specific to each probe. This file is mandatory for accurate recordings. GainCalibrationFileB Gets or sets the path to the gain calibration file for Probe B. Each probe must be provided with a gain calibration file that contains calibration data specific to each probe. This file is mandatory for accurate recordings. ProbeConfigurationA Gets or sets the electrode configuration for Probe A. ProbeConfigurationB Gets or sets the electrode configuration for Probe B."
  },
  "api/OpenEphys.Onix.ConfigureRhd2164.html": {
    "href": "api/OpenEphys.Onix.ConfigureRhd2164.html",
    "title": "Class ConfigureRhd2164",
    "keywords": "ConfigureRhd2164 sink Operator A class for configuring an Intan RHD2164 bioamplifier chip. This configuration class can be linked to a Rhd2164Data instance to stream electrophysiology data from the chip. Inputs & Outputs Configures a RHD2164 device. This will schedule configuration actions to be applied by a StartAcquisition instance prior to data acquisition. ContextTask A sequence of ContextTask instances that holds configuration actions. ContextTask The original sequence modified by adding additional configuration actions required to configure a RHD2164 device. ContextTask Data Frame Member Type Description AcquisitionClockHz uint Gets the acquisition clock rate in Hz. This describes the frequency of the clock used to drive the acquisition counter which is used to provide the clock counter values in oni.Frame.Clock and its derivative types (e.g. Clock, Clock, etc.) BlockReadSize int Gets the number of bytes read by the device driver access to the read channel. This option allows control over a fundamental trade-off between closed-loop response time and overall bandwidth. A minimal value, which is determined by MaxReadFrameSize, will provide the lowest response latency, so long as data can be cleared from hardware memory fast enough to prevent buffering. Larger values will reduce system call frequency, increase overall bandwidth, and may improve processing performance for high-bandwidth data sources. The optimal value depends on the host computer and hardware configuration and must be determined via testing (e.g. using MemoryMonitorData). BlockWriteSize int Gets the number of bytes that are pre-allocated for writing data to hardware. This value determines the amount of memory pre-allocated for calls to Write(uint, IntPtr, int), Write<T>(uint, T), and Write<T>(uint, T[]). A larger size will reduce the average amount of dynamic memory allocation system calls but increase the cost of each of those calls. The minimum size of this option is determined by MaxWriteFrameSize. The effect on real-timer performance is not as large as that of BlockReadSize. DeviceTable Dictionary<uint, Device> Gets the device table containing the full device hierarchy governed by the internal oni.Context. This dictionary maps a fully-qualified oni.Device.Address to an oni.Device instance. MaxReadFrameSize uint Gets the maximal size of a frame produced by a call to oni.Context.ReadFrame() in bytes. This number is the maximum sized frame that can be produced across every device within the device table that generates data. MaxWriteFrameSize uint Gets the maximal size consumed by a call to Write(uint, IntPtr, int) in bytes. This number is the maximum sized frame that can be consumed across every device within the device table that accepts write data. SystemClockHz uint Gets the system clock rate in Hz. This describes the frequency of the clock governing the controller hardware. Properties Property Type Description AnalogHighCutoff Rhd2164AnalogHighCutoff Gets or sets the high cutoff frequency of the analog (pre-ADC) bandpass filter. AnalogLowCutoff Rhd2164AnalogLowCutoff Gets or sets the low cutoff frequency of the analog (pre-ADC) bandpass filter. DspCutoff Rhd2164DspCutoff Gets or sets the cutoff frequency for the digital (post-ADC) high-pass filter used for amplifier offset removal. Enable bool Gets or sets the device enable state. If set to true, a Rhd2164Data instance that is linked to this configuration will produce data. If set to false, it will not produce data."
  },
  "api/OpenEphys.Onix.ConfigureTS4231V1.html": {
    "href": "api/OpenEphys.Onix.ConfigureTS4231V1.html",
    "title": "Class ConfigureTS4231V1",
    "keywords": "ConfigureTS4231V1 sink Operator A class for configuring an array of Triad Semiconductor TS4231 lighthouse receivers for 3D position tracking using a pair of SteamVR V1 base stations. This configuration class can be linked to a TS4231V1PositionData instance to stream 3D position data from light-house receivers when SteamVR V1 base stations have been installed above the arena. Inputs & Outputs Configures a TS4231 receiver array. This will schedule configuration actions to be applied by a StartAcquisition instance prior to data acquisition. ContextTask A sequence of ContextTask instances that holds configuration actions. ContextTask The original sequence modified by adding additional configuration actions required to configure a TS4231 array. ContextTask Data Frame Member Type Description AcquisitionClockHz uint Gets the acquisition clock rate in Hz. This describes the frequency of the clock used to drive the acquisition counter which is used to provide the clock counter values in oni.Frame.Clock and its derivative types (e.g. Clock, Clock, etc.) BlockReadSize int Gets the number of bytes read by the device driver access to the read channel. This option allows control over a fundamental trade-off between closed-loop response time and overall bandwidth. A minimal value, which is determined by MaxReadFrameSize, will provide the lowest response latency, so long as data can be cleared from hardware memory fast enough to prevent buffering. Larger values will reduce system call frequency, increase overall bandwidth, and may improve processing performance for high-bandwidth data sources. The optimal value depends on the host computer and hardware configuration and must be determined via testing (e.g. using MemoryMonitorData). BlockWriteSize int Gets the number of bytes that are pre-allocated for writing data to hardware. This value determines the amount of memory pre-allocated for calls to Write(uint, IntPtr, int), Write<T>(uint, T), and Write<T>(uint, T[]). A larger size will reduce the average amount of dynamic memory allocation system calls but increase the cost of each of those calls. The minimum size of this option is determined by MaxWriteFrameSize. The effect on real-timer performance is not as large as that of BlockReadSize. DeviceTable Dictionary<uint, Device> Gets the device table containing the full device hierarchy governed by the internal oni.Context. This dictionary maps a fully-qualified oni.Device.Address to an oni.Device instance. MaxReadFrameSize uint Gets the maximal size of a frame produced by a call to oni.Context.ReadFrame() in bytes. This number is the maximum sized frame that can be produced across every device within the device table that generates data. MaxWriteFrameSize uint Gets the maximal size consumed by a call to Write(uint, IntPtr, int) in bytes. This number is the maximum sized frame that can be consumed across every device within the device table that accepts write data. SystemClockHz uint Gets the system clock rate in Hz. This describes the frequency of the clock governing the controller hardware. Properties Property Type Description Enable bool Gets or sets the device enable state. If set to true, a TS4231V1Data instance that is linked to this configuration will produce data. If set to false, it will not produce data."
  },
  "api/OpenEphys.Onix.ContextTask.html": {
    "href": "api/OpenEphys.Onix.ContextTask.html",
    "title": "Class ContextTask",
    "keywords": "ContextTask Encapsulates an oni.Context and orchestrates interaction with ONI hardware. This class forms the basis for ONI hardware interaction within the library. It manages an oni.Context. It reads and distributes oni.Frames using a dedicated acquisition thread. It allows oni.Frames to be written to devices that accept them. Finally, it exposes information about the underlying ONI hardware such as the device table, clock rates, and block read and write sizes. Properties Property Type Description AcquisitionClockHz uint Gets the acquisition clock rate in Hz. This describes the frequency of the clock used to drive the acquisition counter which is used to provide the clock counter values in oni.Frame.Clock and its derivative types (e.g. Clock, Clock, etc.) BlockReadSize int Gets the number of bytes read by the device driver access to the read channel. This option allows control over a fundamental trade-off between closed-loop response time and overall bandwidth. A minimal value, which is determined by MaxReadFrameSize, will provide the lowest response latency, so long as data can be cleared from hardware memory fast enough to prevent buffering. Larger values will reduce system call frequency, increase overall bandwidth, and may improve processing performance for high-bandwidth data sources. The optimal value depends on the host computer and hardware configuration and must be determined via testing (e.g. using MemoryMonitorData). BlockWriteSize int Gets the number of bytes that are pre-allocated for writing data to hardware. This value determines the amount of memory pre-allocated for calls to Write(uint, IntPtr, int), Write<T>(uint, T), and Write<T>(uint, T[]). A larger size will reduce the average amount of dynamic memory allocation system calls but increase the cost of each of those calls. The minimum size of this option is determined by MaxWriteFrameSize. The effect on real-timer performance is not as large as that of BlockReadSize. DeviceTable Dictionary<uint, Device> Gets the device table containing the full device hierarchy governed by the internal oni.Context. This dictionary maps a fully-qualified oni.Device.Address to an oni.Device instance. MaxReadFrameSize uint Gets the maximal size of a frame produced by a call to oni.Context.ReadFrame() in bytes. This number is the maximum sized frame that can be produced across every device within the device table that generates data. MaxWriteFrameSize uint Gets the maximal size consumed by a call to Write(uint, IntPtr, int) in bytes. This number is the maximum sized frame that can be consumed across every device within the device table that accepts write data. SystemClockHz uint Gets the system clock rate in Hz. This describes the frequency of the clock governing the controller hardware."
  },
  "api/OpenEphys.Onix.CreateContext.html": {
    "href": "api/OpenEphys.Onix.CreateContext.html",
    "title": "Class CreateContext",
    "keywords": "CreateContext source Operator Creates a ContextTask to orchestrate a single ONI-compliant controller using the specified device driver and host interconnect. Inputs & Outputs Generates a sequence that creates a new ContextTask object. ContextTask A sequence containing a single instance of the ContextTask class. Cancelling the sequence will dispose of the created context. ContextTask Data Frame Member Type Description AcquisitionClockHz uint Gets the acquisition clock rate in Hz. This describes the frequency of the clock used to drive the acquisition counter which is used to provide the clock counter values in oni.Frame.Clock and its derivative types (e.g. Clock, Clock, etc.) BlockReadSize int Gets the number of bytes read by the device driver access to the read channel. This option allows control over a fundamental trade-off between closed-loop response time and overall bandwidth. A minimal value, which is determined by MaxReadFrameSize, will provide the lowest response latency, so long as data can be cleared from hardware memory fast enough to prevent buffering. Larger values will reduce system call frequency, increase overall bandwidth, and may improve processing performance for high-bandwidth data sources. The optimal value depends on the host computer and hardware configuration and must be determined via testing (e.g. using MemoryMonitorData). BlockWriteSize int Gets the number of bytes that are pre-allocated for writing data to hardware. This value determines the amount of memory pre-allocated for calls to Write(uint, IntPtr, int), Write<T>(uint, T), and Write<T>(uint, T[]). A larger size will reduce the average amount of dynamic memory allocation system calls but increase the cost of each of those calls. The minimum size of this option is determined by MaxWriteFrameSize. The effect on real-timer performance is not as large as that of BlockReadSize. DeviceTable Dictionary<uint, Device> Gets the device table containing the full device hierarchy governed by the internal oni.Context. This dictionary maps a fully-qualified oni.Device.Address to an oni.Device instance. MaxReadFrameSize uint Gets the maximal size of a frame produced by a call to oni.Context.ReadFrame() in bytes. This number is the maximum sized frame that can be produced across every device within the device table that generates data. MaxWriteFrameSize uint Gets the maximal size consumed by a call to Write(uint, IntPtr, int) in bytes. This number is the maximum sized frame that can be consumed across every device within the device table that accepts write data. SystemClockHz uint Gets the system clock rate in Hz. This describes the frequency of the clock governing the controller hardware. Properties Property Type Description Driver string Gets or sets a string specifying the device driver used to communicate with hardware. Index int Gets or sets the index of the host interconnect between the ONI controller and host computer. For instance, 0 could correspond to a particular PCIe slot or USB port as enumerated by the operating system and translated by an ONI device driver translator. A value of -1 will attempt to open the default index and is useful if there is only a single ONI controller managed by the specified selected Driver in the host computer."
  },
  "api/OpenEphys.Onix.HarpSyncInputData.html": {
    "href": "api/OpenEphys.Onix.HarpSyncInputData.html",
    "title": "Class HarpSyncInputData",
    "keywords": "HarpSyncInputData source Operator A class that generates a sequence of Harp clock synchronization events produced by the Harp sync input device in the ONIX breakout board. Harp is a standard for asynchronous real-time data acquisition and experimental control in neuroscience. It includes a clock synchronization protocol which allows Harp devices to be connected to a shared clock line and continuously self-synchronize their clocks to a precision of tens of microseconds. This means that all experimental events are timestamped on the same clock and no post-hoc alignment of timing is necessary. The Harp clock signal is transmitted over a serial line with high precision every second. Every time the Harp sync input device in the ONIX breakout board detects a full Harp synchronization packet, a new data frame is emitted pairing the current value of the Harp clock with the local ONIX acquisition clock. Logging the sequence of all Harp synchronization packets can greatly facilitate post-hoc analysis and interpretation of timing signals. For more information see https://harp-tech.org/. Inputs & Outputs Generates a sequence of HarpSyncInputDataFrame objects, each of which contains information about a single Harp clock synchronization event. HarpSyncInputDataFrame Properties Property Type Description DeviceName string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. This is often a one-to-one representation of an ONI device, but can also represent abstract ONI device aggregates or virtual devices."
  },
  "api/OpenEphys.Onix.Headstage64ElectricalStimulatorTrigger.html": {
    "href": "api/OpenEphys.Onix.Headstage64ElectricalStimulatorTrigger.html",
    "title": "Class Headstage64ElectricalStimulatorTrigger",
    "keywords": "Headstage64ElectricalStimulatorTrigger sink Operator A class that controls a headstage-64 onboard electrical stimulus sequencer. This class must be linked to an appropriate configuration, such as a ConfigureHeadstage64ElectricalStimulator, in order to define and deliver electrical stimulation sequences. Inputs & Outputs Start an electrical stimulus sequence. bool A sequence of boolean values indicating the start of a stimulus sequence when true. bool A sequence of boolean values that is identical to source Properties Property Type Description BurstPulseCount uint Gets or sets the number of pulses per burst. DeviceName string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. This is often a one-to-one representation of an ONI device, but can also represent abstract ONI device aggregates or virtual devices. Enable bool Gets or sets the device enable state. If set to true, then the electrical stimulator circuit will respect triggers. If set to false, triggers will be ignored. InterBurstInterval uint Gets or sets the duration of the inter-burst interval within a stimulus train in μsec. InterPhaseCurrent double Gets or sets the amplitude of the interphase current of each pulse in μA. InterPhaseInterval uint Gets or sets the duration of the interphase interval of each pulse in μsec. InterPulseInterval uint Gets or sets the duration of the inter-pulse interval within a single burst in μsec. PhaseOneCurrent double Gets or sets the amplitude of the first phase of each pulse in μA. PhaseOneDuration uint Gets or sets the duration of the first phase of each pulse in μsec. PhaseTwoCurrent double Gets or sets the amplitude of the second phase of each pulse in μA. PhaseTwoDuration uint Gets or sets the duration of the second phase of each pulse in μsec. PowerEnable bool Gets or sets the electrical stimulator's power state. If set to true, then the electrical stimulator's ±15V power supplies will be turned on. If set to false, they will be turned off. It may be desirable to power down the electrical stimulator's power supplies outside of stimulation windows to reduce power consumption and electrical noise. This property must be set to true in order for electrical stimuli to be delivered properly. It takes ~10 milliseconds for these supplies to stabilize. TrainBurstCount uint Gets or sets the number of bursts in a stimulus train. TriggerDelay uint Gets or sets a delay from receiving a trigger to the start of stimulus sequence application in μsec"
  },
  "api/OpenEphys.Onix.Headstage64OpticalStimulatorTrigger.html": {
    "href": "api/OpenEphys.Onix.Headstage64OpticalStimulatorTrigger.html",
    "title": "Class Headstage64OpticalStimulatorTrigger",
    "keywords": "Headstage64OpticalStimulatorTrigger sink Operator A class that controls a headstage-64 onboard optical stimulus sequencer. This class must be linked to an appropriate configuration, such as a ConfigureHeadstage64OpticalStimulator, in order to define and deliver optical stimulation sequences. Inputs & Outputs Start an optical stimulus sequence. bool A sequence of boolean values indicating the start of a stimulus sequence when true. bool A sequence of boolean values that is identical to source Properties Property Type Description BurstCurrent double Gets total direct current required during the application of a burst. This value should be kept below 50 mA to prevent excess head accumulation on the headstage. BurstsPerTrain uint Gets or sets the number of bursts in a stimulus train. ChannelOneCurrent double Gets or sets the percent of MaxCurrent that will delivered to channel 1 in each pulse. ChannelTwoCurrent double Gets or sets the percent of MaxCurrent that will delivered to channel 2 in each pulse. Delay double Gets or sets a delay from receiving a trigger to the start of stimulus sequence application in msec. DeviceName string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. This is often a one-to-one representation of an ONI device, but can also represent abstract ONI device aggregates or virtual devices. Enable bool Gets or sets the device enable state. If set to true, then the optical stimulator circuit will respect triggers. If set to false, triggers will be ignored. InterBurstInterval double Gets or sets the duration of the inter-burst interval within a stimulus train in msec. MaxCurrent double Gets or sets the Maximum current per channel per pulse in mA. This value defines the maximal possible current that can be delivered to each channel. To get different amplitudes for each channel use the ChannelOneCurrent and ChannelTwoCurrent properties. PulseDuration double Gets or sets the duration of each pulse in msec. PulsesPerBurst uint Gets or sets the number of pulses per burst. PulsesPerSecond double Gets or sets the pulse period within a burst in msec."
  },
  "api/OpenEphys.Onix.HeartbeatData.html": {
    "href": "api/OpenEphys.Onix.HeartbeatData.html",
    "title": "Class HeartbeatData",
    "keywords": "HeartbeatData source Operator A class that produces a sequence of heartbeat data frames. This data stream class must be linked to an appropriate configuration, such as a ConfigureHeartbeat, in order to stream heartbeat data. Inputs & Outputs Generates a sequence of HeartbeatDataFrame objects, each of which contains period signal from the acquisition system indicating that it is active. HeartbeatDataFrame Properties Property Type Description DeviceName string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. This is often a one-to-one representation of an ONI device, but can also represent abstract ONI device aggregates or virtual devices."
  },
  "api/OpenEphys.Onix.MemoryMonitorData.html": {
    "href": "api/OpenEphys.Onix.MemoryMonitorData.html",
    "title": "Class MemoryMonitorData",
    "keywords": "MemoryMonitorData source Operator A class that produces a sequence of memory usage data frames. This data stream class must be linked to an appropriate configuration, such as a ConfigureMemoryMonitor, in order to stream data. Inputs & Outputs Generates a sequence of MemoryMonitorDataFrame objects, which contains information about the system's low-level first-in, first-out (FIFO) data buffer. MemoryMonitorDataFrame Properties Property Type Description DeviceName string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. This is often a one-to-one representation of an ONI device, but can also represent abstract ONI device aggregates or virtual devices."
  },
  "api/OpenEphys.Onix.NeuropixelsV1eAdc.html": {
    "href": "api/OpenEphys.Onix.NeuropixelsV1eAdc.html",
    "title": "Class NeuropixelsV1eAdc",
    "keywords": "NeuropixelsV1eAdc A class that contains ADC calibration values for a NeuropixelsV1e device. Properties Property Type Description Cfix int Neuropixels 1.0 Cfix calibration setting Coarse int Neuropixels 1.0 Coarse calibration setting CompN int Neuropixels 1.0 CompN calibration setting CompP int Neuropixels 1.0 CompP calibration setting Fine int Neuropixels 1.0 Fine calibration setting Offset int Neuropixels 1.0 Offset calibration setting Slope int Neuropixels 1.0 Slope calibration setting Threshold int Neuropixels 1.0 Threshold calibration setting"
  },
  "api/OpenEphys.Onix.NeuropixelsV1eBno055Data.html": {
    "href": "api/OpenEphys.Onix.NeuropixelsV1eBno055Data.html",
    "title": "Class NeuropixelsV1eBno055Data",
    "keywords": "NeuropixelsV1eBno055Data source Operator Produces a sequence of Bno055DataFrame objects from a NeuropixelsV1e headstage. Inputs & Outputs Generates a sequence of Bno055DataFrame objects at approximately 100 Hz. This will generate a sequence of Bno055DataFrame objects at approximately 100 Hz. This rate may be limited by the I2C bus. Bno055DataFrame Generates a sequence of Bno055DataFrame objects. Anything Bno055DataFrame Properties Property Type Description DeviceName string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. This is often a one-to-one representation of an ONI device, but can also represent abstract ONI device aggregates or virtual devices."
  },
  "api/OpenEphys.Onix.NeuropixelsV1eData.html": {
    "href": "api/OpenEphys.Onix.NeuropixelsV1eData.html",
    "title": "Class NeuropixelsV1eData",
    "keywords": "NeuropixelsV1eData source Operator Produces a sequence of NeuropixelsV1eDataFrame objects from a NeuropixelsV1e headstage. Inputs & Outputs Generates a sequence of NeuropixelsV1eDataFrame objects. NeuropixelsV1eDataFrame Properties Property Type Description BufferSize int Gets or sets the buffer size. Buffer size sets the number of super frames that are buffered before propagating data. A super frame consists of 384 channels from the spike-band and 32 channels from the LFP band. The buffer size must be a multiple of 12. DeviceName string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. This is often a one-to-one representation of an ONI device, but can also represent abstract ONI device aggregates or virtual devices."
  },
  "api/OpenEphys.Onix.NeuropixelsV2QuadShankElectrode.html": {
    "href": "api/OpenEphys.Onix.NeuropixelsV2QuadShankElectrode.html",
    "title": "Class NeuropixelsV2QuadShankElectrode",
    "keywords": "NeuropixelsV2QuadShankElectrode Defines a configuration for quad-shank electrodes. Properties Property Type Description Bank NeuropixelsV2QuadShankBank Gets the NeuropixelsV2QuadShankBank of this electrode. The bank is automatically determined from the electrode number, and corresponds to one of four logical groupings along each shank. See NeuropixelsV2QuadShankBank for more details. Channel int Gets the channel number of this electrode. Channel number is automatically calculated from the electrode number, and will be between 0 and 383. ElectrodeNumber int Gets or sets the electrode number. When the electrode number is updated, all other properties are automatically calculated based on the number given. IntraShankElectrodeIndex int Gets the index of the shank of this electrode. Shank index is automatically determined from the electrode number, and will be between 0 and 1279. Position PointF Gets the position of the electrode in relation to the probe. Shank int Gets the shank of this electrode. Shank is automatically determined from the electrode number, and will be between 0 and 3."
  },
  "api/OpenEphys.Onix.NeuropixelsV2QuadShankProbeConfiguration.html": {
    "href": "api/OpenEphys.Onix.NeuropixelsV2QuadShankProbeConfiguration.html",
    "title": "Class NeuropixelsV2QuadShankProbeConfiguration",
    "keywords": "NeuropixelsV2QuadShankProbeConfiguration Defines a configuration for quad-shank probes. Properties Property Type Description ChannelMap List<NeuropixelsV2QuadShankElectrode> Gets the existing channel map listing all currently enabled electrodes. The channel map will always be 384 channels, and will return the 384 enabled electrodes. Reference NeuropixelsV2QuadShankReference Gets or sets the reference for all electrodes. All electrodes are set to the same reference, which can be External or any of the tip references (Tip1, Tip2, etc.). Setting to External will use the external reference, while Tip1 sets the reference to the electrode at the tip of the first shank."
  },
  "api/OpenEphys.Onix.NeuropixelsV2eBetaData.html": {
    "href": "api/OpenEphys.Onix.NeuropixelsV2eBetaData.html",
    "title": "Class NeuropixelsV2eBetaData",
    "keywords": "NeuropixelsV2eBetaData source Operator Produces a sequence of NeuropixelsV2eBetaDataFrame objects from a NeuropixelsV2eBeta headstage. Inputs & Outputs Generates a sequence of NeuropixelsV2eDataFrame objects. NeuropixelsV2eBetaDataFrame Properties Property Type Description BufferSize int Gets or sets the buffer size. Buffer size sets the number of frames that are buffered before propagating data. DeviceName string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. This is often a one-to-one representation of an ONI device, but can also represent abstract ONI device aggregates or virtual devices. ProbeIndex NeuropixelsV2Probe Gets or sets the probe index."
  },
  "api/OpenEphys.Onix.NeuropixelsV2eBno055Data.html": {
    "href": "api/OpenEphys.Onix.NeuropixelsV2eBno055Data.html",
    "title": "Class NeuropixelsV2eBno055Data",
    "keywords": "NeuropixelsV2eBno055Data source Operator Produces a sequence of Bno055DataFrame objects from a NeuropixelsV2e headstage. Inputs & Outputs Generates a sequence of Bno055DataFrame objects at approximately 100 Hz. This will generate a sequence of Bno055DataFrame objects at approximately 100 Hz. This rate may be limited by the I2C bus. Bno055DataFrame Generates a sequence of Bno055DataFrame objects. Anything Bno055DataFrame Properties Property Type Description DeviceName string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. This is often a one-to-one representation of an ONI device, but can also represent abstract ONI device aggregates or virtual devices."
  },
  "api/OpenEphys.Onix.NeuropixelsV2eData.html": {
    "href": "api/OpenEphys.Onix.NeuropixelsV2eData.html",
    "title": "Class NeuropixelsV2eData",
    "keywords": "NeuropixelsV2eData source Operator Produces a sequence of NeuropixelsV2eDataFrame objects from a NeuropixelsV2e headstage. Inputs & Outputs Generates a sequence of NeuropixelsV2eDataFrame objects. NeuropixelsV2eDataFrame Properties Property Type Description BufferSize int Gets or sets the buffer size. This property determines the number of super-frames that are buffered before data is propagated. A super-frame consists of 384 channels from the spike-band and 32 channels from the LFP band. If this value is set to 30, then 30 super-frames, along with corresponding clock values, will be collected and packed into each NeuropixelsV2eDataFrame. Because channels are sampled at 30 kHz, this is equivalent to 1 millisecond of data from each channel. DeviceName string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. This is often a one-to-one representation of an ONI device, but can also represent abstract ONI device aggregates or virtual devices. ProbeIndex NeuropixelsV2Probe Gets or sets the probe index."
  },
  "api/OpenEphys.Onix.Rhd2164Data.html": {
    "href": "api/OpenEphys.Onix.Rhd2164Data.html",
    "title": "Class Rhd2164Data",
    "keywords": "Rhd2164Data source Operator A class that produces a sequence of Rhd2164DataFrame objects. This data stream class must be linked to an appropriate configuration, such as a ConfigureRhd2164, in order to stream electrophysiology data. Inputs & Outputs Generates a sequence of Rhd2164DataFrame objects, each of which are a buffered set of multichannel samples an RHD2164 device. Rhd2164DataFrame Properties Property Type Description BufferSize int Gets or sets the number of samples collected for each channel that are used to create a single Rhd2164DataFrame. This property determines the number of samples that are buffered for each electrophysiology and auxiliary channel produced by the RHD2164 chip before data is propagated. For instance, if this value is set to 30, then 30 samples, along with corresponding clock values, will be collected from each of the electrophysiology and auxiliary channels and packed into each Rhd2164DataFrame. Because channels are sampled at 30 kHz, this is equivalent to 1 millisecond of data from each channel. DeviceName string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. This is often a one-to-one representation of an ONI device, but can also represent abstract ONI device aggregates or virtual devices."
  },
  "api/OpenEphys.Onix.StartAcquisition.html": {
    "href": "api/OpenEphys.Onix.StartAcquisition.html",
    "title": "Class StartAcquisition",
    "keywords": "StartAcquisition combinator Operator Starts data acquisition and frame distribution on a ContextTask. Inputs & Outputs Starts data acquisition and frame distribution on a ContextTask and returns the sequence of all received oni.Frame objects, grouped by device address. ContextTask The sequence of ContextTask objects on which to start data acquisition and frame distribution. IGroupedObservable<uint, Frame> A sequence of oni.Frame objects for each ContextTask, grouped by device address. Properties Property Type Description ReadSize int Gets or sets the number of bytes read by the device driver access to the read channel. This option allows control over a fundamental trade-off between closed-loop response time and overall bandwidth. A minimal value, which is determined by MaxReadFrameSize, will provide the lowest response latency, so long as data can be cleared from hardware memory fast enough to prevent buffering. Larger values will reduce system call frequency, increase overall bandwidth, and may improve processing performance for high-bandwidth data sources. The optimal value depends on the host computer and hardware configuration and must be determined via testing (e.g. using MemoryMonitorData). WriteSize int Gets or sets the number of bytes that are pre-allocated for writing data to hardware. This value determines the amount of memory pre-allocated for calls to Write(uint, IntPtr, int), Write<T>(uint, T), and Write<T>(uint, T[]). A larger size will reduce the average amount of dynamic memory allocation system calls but increase the cost of each of those calls. The minimum size of this option is determined by MaxWriteFrameSize. The effect on real-timer performance is not as large as that of BlockReadSize."
  },
  "api/OpenEphys.Onix.TS4231V1Data.html": {
    "href": "api/OpenEphys.Onix.TS4231V1Data.html",
    "title": "Class TS4231V1Data",
    "keywords": "TS4231V1Data source Operator A class that produces a sequence of decoded optical signals produced by a pair of SteamVR V1 base stations. This data stream class must be linked to an appropriate configuration, such as a ConfigureTS4231V1, in order to stream 3D position data. The data produced by this class contains individual base station pulse/sweep codes and timing information. These data provide rapid updates that constrain the possible position of a sensor and therefore can be combined with orientation information in a downstream predictive model (e.g. Kalman filter) for high-accuracy and robust position tracking. To produce naïve position estimates, use the TS4231V1PositionData operator instead of this one. Inputs & Outputs Generates a sequence of TS4231V1DataFrame objects, each of which contains information on a single lighthouse optical sweep or pulse. TS4231V1DataFrame Properties Property Type Description DeviceName string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. This is often a one-to-one representation of an ONI device, but can also represent abstract ONI device aggregates or virtual devices."
  },
  "api/OpenEphys.Onix.TS4231V1PositionData.html": {
    "href": "api/OpenEphys.Onix.TS4231V1PositionData.html",
    "title": "Class TS4231V1PositionData",
    "keywords": "TS4231V1PositionData source Operator A class that produces a sequence of 3D positions from an array of Triad Semiconductor TS4231 receivers beneath a pair of SteamVR V1 base stations. This data stream class must be linked to an appropriate configuration, such as a ConfigureTS4231V1, in order to stream data. The data produced by this class contains naïve geometric estimates of positions of photodiodes attached to each TS4231 chip. This operator makes the following assumptions about the setup: Two SteamVR V1 base stations are used. The base stations have been synchronized with a patch cable and their modes set to ‘A’ and ‘b’, respectively. The base stations are pointed in the same direction. The Z-axis extends away the emitting face of lighthouses, X along the direction of the text on the back label, and Y from bottom to top text on the back label. This operator collects a sequence of oni.Frame objects from each TS3231 receiver that are used to determine the ray from each base station to the TS3231's photodiode. A simple geometric inversion is performed to determine the photodiodes 3D position from the values P and Q. It does not use a predictive model or integrate data from an IMU and is therefore quite sensitive to obstructions in and will require post-hoc processing to correct systematic errors due to optical aberrations and nonlinearities. The the TS4231V1Data operator provides access to individual lighthouse signals that is useful for a creating more robust position estimates using downstream processing. Inputs & Outputs Generates a sequence of TS4231V1PositionDataFrame objects, each of which contains the 3D position of single photodiode. TS4231V1PositionDataFrame Properties Property Type Description DeviceName string Gets or sets a unique device name. The device name provides a unique, human-readable identifier that is used to link software elements for configuration, control, and data streaming to hardware. This is often a one-to-one representation of an ONI device, but can also represent abstract ONI device aggregates or virtual devices. P Point3d Gets or sets the position of the first base station in arbitrary units. The units used will determine the units of Position and must match those used in Q. Typically this value is used to define the origin and remains at (0, 0, 0). Q Point3d Gets or sets the position of the second base station in arbitrary units. The units used will determine the units of Position and must match those used in P."
  },
  "api/OpenEphys.Onix.html": {
    "href": "api/OpenEphys.Onix.html",
    "title": "Namespace OpenEphys.Onix",
    "keywords": ""
  },
  "articles/devices/bno055.html": {
    "href": "articles/devices/bno055.html",
    "title": "Bno055",
    "keywords": "Bno055 Workflow This is a fully functional workflow that configures a BNO055 device from a Headstage64 headstage. Visualize Data Nodes with a single data stream can be plotted using a TimeSeriesVisualizer. To enable visualization of the node, double-click it while the workflow is running, or right-click on it while the workflow is not running and choose Show Visualizer => Bonsai.Design.Visualizers.TimeSeriesVisualizer. The TimeSeriesVisualizer can be found in the Bonsai.Design.Visualizers package. Refer to Visualizing Data for more information on visualizers and how to download them. Note that data will not be shown until a workflow is running. Check out Running a Workflow to see how to run a workflow."
  },
  "articles/devices/bno055_neuropixelsv1e.html": {
    "href": "articles/devices/bno055_neuropixelsv1e.html",
    "title": "NeuropixelsV1eBno055",
    "keywords": "NeuropixelsV1eBno055 Workflow This is a fully functional workflow that configures a BNO055 device from a NeuropixelsV1e headstage. Visualize Data Nodes with a single data stream can be plotted using a TimeSeriesVisualizer. To enable visualization of the node, double-click it while the workflow is running, or right-click on it while the workflow is not running and choose Show Visualizer => Bonsai.Design.Visualizers.TimeSeriesVisualizer. The TimeSeriesVisualizer can be found in the Bonsai.Design.Visualizers package. Refer to Visualizing Data for more information on visualizers and how to download them. Note that data will not be shown until a workflow is running. Check out Running a Workflow to see how to run a workflow."
  },
  "articles/devices/bno055_neuropixelsv2e.html": {
    "href": "articles/devices/bno055_neuropixelsv2e.html",
    "title": "NeuropixelsV2eBno055",
    "keywords": "NeuropixelsV2eBno055 Workflow This is a fully functional workflow that configures a BNO055 device from a NeuropixelsV2e headstage. Visualize Data Nodes with a single data stream can be plotted using a TimeSeriesVisualizer. To enable visualization of the node, double-click it while the workflow is running, or right-click on it while the workflow is not running and choose Show Visualizer => Bonsai.Design.Visualizers.TimeSeriesVisualizer. The TimeSeriesVisualizer can be found in the Bonsai.Design.Visualizers package. Refer to Visualizing Data for more information on visualizers and how to download them. Note that data will not be shown until a workflow is running. Check out Running a Workflow to see how to run a workflow."
  },
  "articles/devices/breakoutanalogio.html": {
    "href": "articles/devices/breakoutanalogio.html",
    "title": "BreakoutAnalogIO",
    "keywords": "BreakoutAnalogIO Workflow This is a fully functional workflow that configures a BreakoutAnalogIO device from a Breakout Board headstage. Visualize Data To view nodes that output a CV.Mat data type, use a MatVisualizer. To enable visualization of the node, double-click it while the workflow is running, or right-click on it while the workflow is not running and choose Show Visualizer => Bonsai.Dsp.Design.MatVisualizer. The MatVisualizer can be found in the Bonsai.Dsp.Design package. Refer to Visualizing Data for more information on visualizers and how to download them. Note that data will not be shown until a workflow is running. Check out Running a Workflow to see how to run a workflow."
  },
  "articles/devices/breakoutdigitalio.html": {
    "href": "articles/devices/breakoutdigitalio.html",
    "title": "BreakoutDigitalIO",
    "keywords": "BreakoutDigitalIO Workflow This is a fully functional workflow that configures a BreakoutDigitalIO device from a Breakout Board headstage. Visualize Data The output of these nodes can be inspected using the ObjectTextVisualizer. To enable visualization of the node, double-click it while the workflow is running, or right-click on it while the workflow is not running and choose Show Visualizer => Bonsai.Design.ObjectTextVisualizer. Refer to Visualizing Data for more information on visualizers and how to download them. Note that data will not be shown until a workflow is running. Check out Running a Workflow to see how to run a workflow."
  },
  "articles/devices/electricalstimulator.html": {
    "href": "articles/devices/electricalstimulator.html",
    "title": "Headstage64ElectricalStimulator",
    "keywords": "Headstage64ElectricalStimulator Workflow This is a fully functional workflow that configures a ElectricalStimulator device from a Headstage64 headstage. Send Trigger In the workflow, pressing the middle button on the mouse will send a trigger, delivering the stimulation waveform that is configured. The MouseButtonDown node can be found in the Bonsai.Windows.Input package."
  },
  "articles/devices/heartbeat.html": {
    "href": "articles/devices/heartbeat.html",
    "title": "Heartbeat",
    "keywords": "Heartbeat Workflow This is a fully functional workflow that configures a Heartbeat device from a Breakout Board headstage. Visualize Data Nodes with a single data stream can be plotted using a TimeSeriesVisualizer. To enable visualization of the node, double-click it while the workflow is running, or right-click on it while the workflow is not running and choose Show Visualizer => Bonsai.Design.Visualizers.TimeSeriesVisualizer. The TimeSeriesVisualizer can be found in the Bonsai.Design.Visualizers package. Refer to Visualizing Data for more information on visualizers and how to download them. Note that data will not be shown until a workflow is running. Check out Running a Workflow to see how to run a workflow."
  },
  "articles/devices/memorymonitor.html": {
    "href": "articles/devices/memorymonitor.html",
    "title": "MemoryMonitor",
    "keywords": "MemoryMonitor Workflow This is a fully functional workflow that configures a MemoryMonitor device from a Breakout Board headstage. Visualize Data Nodes with a single data stream can be plotted using a TimeSeriesVisualizer. To enable visualization of the node, double-click it while the workflow is running, or right-click on it while the workflow is not running and choose Show Visualizer => Bonsai.Design.Visualizers.TimeSeriesVisualizer. The TimeSeriesVisualizer can be found in the Bonsai.Design.Visualizers package. Refer to Visualizing Data for more information on visualizers and how to download them. Note that data will not be shown until a workflow is running. Check out Running a Workflow to see how to run a workflow."
  },
  "articles/devices/neuropixelsv1e.html": {
    "href": "articles/devices/neuropixelsv1e.html",
    "title": "NeuropixelsV1e",
    "keywords": "NeuropixelsV1e Workflow This is a fully functional workflow that configures a NeuropixelsV1e device from a NeuropixelsV1e headstage. Visualize Data To view nodes that output a CV.Mat data type, use a MatVisualizer. To enable visualization of the node, double-click it while the workflow is running, or right-click on it while the workflow is not running and choose Show Visualizer => Bonsai.Dsp.Design.MatVisualizer. The MatVisualizer can be found in the Bonsai.Dsp.Design package. Refer to Visualizing Data for more information on visualizers and how to download them. Note that data will not be shown until a workflow is running. Check out Running a Workflow to see how to run a workflow."
  },
  "articles/devices/neuropixelsv2e.html": {
    "href": "articles/devices/neuropixelsv2e.html",
    "title": "NeuropixelsV2e",
    "keywords": "NeuropixelsV2e Workflow This is a fully functional workflow that configures a NeuropixelsV2e device from a NeuropixelsV2e headstage. Visualize Data To view nodes that output a CV.Mat data type, use a MatVisualizer. To enable visualization of the node, double-click it while the workflow is running, or right-click on it while the workflow is not running and choose Show Visualizer => Bonsai.Dsp.Design.MatVisualizer. The MatVisualizer can be found in the Bonsai.Dsp.Design package. Refer to Visualizing Data for more information on visualizers and how to download them. Note that data will not be shown until a workflow is running. Check out Running a Workflow to see how to run a workflow."
  },
  "articles/devices/neuropixelsv2ebeta.html": {
    "href": "articles/devices/neuropixelsv2ebeta.html",
    "title": "NeuropixelsV2eBeta",
    "keywords": "NeuropixelsV2eBeta Workflow This is a fully functional workflow that configures a NeuropixelsV2eBeta device from a NeuropixelsV2eBeta headstage. Visualize Data To view nodes that output a CV.Mat data type, use a MatVisualizer. To enable visualization of the node, double-click it while the workflow is running, or right-click on it while the workflow is not running and choose Show Visualizer => Bonsai.Dsp.Design.MatVisualizer. The MatVisualizer can be found in the Bonsai.Dsp.Design package. Refer to Visualizing Data for more information on visualizers and how to download them. Note that data will not be shown until a workflow is running. Check out Running a Workflow to see how to run a workflow."
  },
  "articles/devices/rhd2164.html": {
    "href": "articles/devices/rhd2164.html",
    "title": "Rhd2164",
    "keywords": "Rhd2164 Workflow This is a fully functional workflow that configures a Rhd2164 device from a Headstage64 headstage. Visualize Data To view nodes that output a CV.Mat data type, use a MatVisualizer. To enable visualization of the node, double-click it while the workflow is running, or right-click on it while the workflow is not running and choose Show Visualizer => Bonsai.Dsp.Design.MatVisualizer. The MatVisualizer can be found in the Bonsai.Dsp.Design package. Refer to Visualizing Data for more information on visualizers and how to download them. Note that data will not be shown until a workflow is running. Check out Running a Workflow to see how to run a workflow."
  },
  "articles/devices/ts4231.html": {
    "href": "articles/devices/ts4231.html",
    "title": "TS4231",
    "keywords": "TS4231 Workflow This is a fully functional workflow that configures a TS4231 device from a Headstage64 headstage. Visualize Data Nodes with a single data stream can be plotted using a TimeSeriesVisualizer. To enable visualization of the node, double-click it while the workflow is running, or right-click on it while the workflow is not running and choose Show Visualizer => Bonsai.Design.Visualizers.TimeSeriesVisualizer. The TimeSeriesVisualizer can be found in the Bonsai.Design.Visualizers package. The output of these nodes can be inspected using the ObjectTextVisualizer. To enable visualization of the node, double-click it while the workflow is running, or right-click on it while the workflow is not running and choose Show Visualizer => Bonsai.Design.ObjectTextVisualizer. Refer to Visualizing Data for more information on visualizers and how to download them. Note that data will not be shown until a workflow is running. Check out Running a Workflow to see how to run a workflow."
  },
  "articles/getting-started/bonsai_usage.html": {
    "href": "articles/getting-started/bonsai_usage.html",
    "title": "Bonsai Usage",
    "keywords": "Bonsai Usage To begin, the first thing to do is to open up the Bonsai editor. This can be done by starting Bonsai and clicking on the New File button on the left side. Alternatively, if you have previously opened or saved a file in Bonsai, there will be a list of recently opened files on the right side; any of those can be chosen and they will be opened in the editor automatically. From the editor, nodes can be selected on the left side and placed into the workspace. Before going into details on how to place nodes, we will instead go over the different types of nodes, some examples of ONIX-specific nodes in each category, and some common categories of properties that can be modified across nodes."
  },
  "articles/getting-started/getting_started.html": {
    "href": "articles/getting-started/getting_started.html",
    "title": "Getting Started",
    "keywords": "Getting Started Welcome to the user guide! The next few pages are dedicated to users who are unfamiliar with ONIX and Bonsai, and will teach them what ONIX is, how to download and install Bonsai, open a new file, place nodes (and understand what a node is), reorder a workflow, run a workflow, and finally visualize data. For those who are already familiar with Bonsai and are looking for a particular device or headstage to learn more about the hardware and how to utilize it, the table of contents on the left contains entries for each available device and headstage. Choose a page to learn more about the hardware and view a fully complete workflow that can be copied directly into Bonsai to aid in quickly setting up and collecting data from a system. Note Add links to relevant pages for each of the action items listed here"
  },
  "articles/getting-started/initialize_oni_context.html": {
    "href": "articles/getting-started/initialize_oni_context.html",
    "title": "Initialize the ONI Context",
    "keywords": "Initialize the ONI Context The CreateContext operator initializes the acquisition context, and it should be the first node you add to your workflow as it provides access to the hardware device table for all other configuration operators. There are several different ways to find this node and add it to the workflow: From the Bonsai editor, navigate to the toolbox on the left side of the screen and expand the Source section. Next, expand the OpenEphys.Onix section, and find the CreateContext line. The node can then be added by either double-clicking it, or dragging and dropping the node into the workflow. Click on the textbox at the top of the toolbox on the left, or from Ctrl + E to focus on the textbox, and type CreateContext to search for the node. Same as (1), the node can be placed by double-clicking or dragging and dropping; additionally, if the CreateContext string is highlighted Enter can be pressed to place the node immediately. Hover over the image of the CreateContext workflow below, and click on the clipboard icon in the top-right corner of the workflow image to copy the workflow to the clipboard. Navigate back to Bonsai, and paste the copied workflow into the active editor. Pasting can be done via Ctrl + V, or right-clicking in the editor and choosing Paste. CreateContext Workflow This is a nominally functional workflow that provides access to the ONI context, from which all nodes can then be linked to and configured, while also demonstrating how a Breakout Board can be configured before finishing the configuration chain by placing a StartAcquisition node:"
  },
  "articles/getting-started/install_and_download.html": {
    "href": "articles/getting-started/install_and_download.html",
    "title": "Installation and Download",
    "keywords": "Installation and Download To install OpenEphys.Onix, first install Bonsai here Once Bonsai is installed, open Bonsai and download the necessary packages Open the Bonsai package manager or Go to Browse Download the Bonsai.StarterPack, which contains several commonly used packages that will be useful for creating workflows and visualizing data. Search for Bonsai.StarterPack (1), select the package and click Install (2). Click I Accept to accept the licenses. Change the package source to All (1), then follow the same steps (2,3) to search for and install OpenEphys.Onix Warning Update this once the package has been published to NuGet Note Alternatively, to take advantage of the graphical user interface built on top of Bonsai, search for the OpenEphys.Onix.Design package, which provides GUI's for many of the configurable nodes, making it easier to configure settings and visualize changes prior to committing them to the hardware Now that Bonsai has been installed, and the appropriate packages downloaded, it is time to start placing nodes and configuring them. If you are new to Bonsai, the following sections give a high-level understanding of how Bonsai is organized, and some of the ONIX-specific concepts that will be useful for learning how to work with the nodes."
  },
  "articles/getting-started/next_steps.html": {
    "href": "articles/getting-started/next_steps.html",
    "title": "Next Steps",
    "keywords": "Next Steps Continue browsing Getting Started and check out specific nodes on the left to see how to configure each node, as well as some ways to visualize data. Each page will have a fully functional workflow that can be copied into Bonsai to provide an easy starting point for generating data. For more technical information on each node, head to the OpenEphys.Onix to see a more developer-focused view of each node. More complex and in-depth tutorials for placing multiple nodes and moving towards generating data in an experimental setting can be found in the Tutorials."
  },
  "articles/getting-started/node_types.html": {
    "href": "articles/getting-started/node_types.html",
    "title": "Node Types",
    "keywords": "Node Types In Bonsai, all objects are called \"nodes\", and have a specific function associated with them depending on what they do; this can be Source, Sink, Combinator, Transform, or Condition. For ONIX nodes, they are all classified as either Source, Sink, or Combinator. Node Type Description Example ONIX nodes Source Generate event streams from devices or files CreateContext, Bno055Data, NeuropixelsV1eData Sink Save data or trigger external outputs ConfigureHeadstage64, ConfigureNeuropixelsV1eHeadstage Combinator Manage control flow or synchronize parallel inputs StartAcquisition Nodes are placed in the Bonsai editor and can be saved into a \"workflow\", which is a grouping of nodes and saved settings. This workflow can then be run to perform some task, depending on what nodes are placed."
  },
  "articles/getting-started/property_categories.html": {
    "href": "articles/getting-started/property_categories.html",
    "title": "Property Categories",
    "keywords": "Property Categories There are specific categories of properties that define when a node's properties can be modified. Configuration properties are only settable when the workflow is not running, and for ONIX devices define how to initialize the device. Examples would be setting the number of channels to record from, the frame rate of a camera, or defining filters to apply to recording channels. Acquisition properties can be manipulated when the workflow is running as well as when it is not running. An example would be a waveform to send as a stimulus, which can be modified in real-time and sent to the device multiple times with different parameters."
  },
  "articles/getting-started/running_a_workflow.html": {
    "href": "articles/getting-started/running_a_workflow.html",
    "title": "Running a Workflow",
    "keywords": "Running a Workflow Once all nodes have been placed and linked correctly, and all Configuration properties have been set, it is now possible to run a workflow. Note that some aspects of Bonsai are only available in specific contexts; for instance, the GUIs mentioned above can only be opened when a workflow is not running. Once a workflow is running, these GUIs are not accessible, but visualizers for certain nodes can be opened to view the streaming data. Running a workflow can be done in one of two ways: (1) Press the Start button at the top of the Bonsai editor, and (2) Press F5. Upon starting a workflow, a context will be created, and all devices will be configured based on the Configuration properties. Any *Data nodes will then begin streaming data, and can be visualized."
  },
  "articles/getting-started/tips_and_tricks.html": {
    "href": "articles/getting-started/tips_and_tricks.html",
    "title": "Tips and Tricks",
    "keywords": "Tips and Tricks Bonsai Node Actions When running a workflow in Bonsai, nodes are evaluated from left to right, and top to bottom, meaning that the order of the nodes becomes very important. Additionally, nodes that are linked together conceptually must be linked together explicitly in the editor. Below is a table with some methods for adding links, removing links, reordering nodes horizontally and vertically, as well as some shortcuts to aid in placing nodes more efficiently. The order of nodes is also important for which actions can be taken. In the table below, the \"first\" node is always the one that is on the left side, or on the bottom for multiple rows of nodes. If the first node clicked is on the right side, or on the top, these actions do not work. Goal Clicks / Keystrokes Description Link two nodes Click and hold the first node, drag the cursor to the second node, and release While dragging the cursor, it will temporarily change to a red symbol until there is a valid target (e.g., the second node), where it will change to an up arrow Link two nodes Right-click the first node, and select Create Connection. Select the second node While moving the cursor, it will change to an up arrow. A valid node target will change color when hovering over it Link two nodes on placement Click on a node in the editor to select it, then place a node using either method (1) or (2) above If a node is currently selected in the editor when a new node is added, whether it is added by clicking and dragging, double-clicking, or pressing Enter, the newly placed node will be connected to the first node automatically Unlink two nodes Click the first node to select it, hold Shift, click and hold the first node, drag to the second node, and release While dragging the cursor, it will temporarily change to a red symbol until there is a valid target (e.g., the second node), where it will change to an up arrow Unlink two nodes Right-click the first node, and select Remove Connection. Select the second node While moving the cursor, it will change to an up arrow. A valid node target will change color when hovering over it Move row of nodes up Hold Alt, click and hold the first node, drag upwards to a node in another row, and release This action does not require that the node be selected prior to performing the action. The second node that is highlighted when the button / mouse are released will now be under the first node Change order of nodes in a row Hold Ctrl, click and hold the first node, drag to the right to the second node, and release This action does not require that the node be selected prior to performing the action. This can change the order of any two nodes that are a part of the same row; it is not constrained to adjacent nodes. Note that if the new placement of the nodes is not valid (such as giving a Source node an input), it will knock the node of the current row and remove any connections Note In the context of OpenEphys.Onix, almost all workflows should have the top row containing a CreateContext node connected to an arbitrary number of Configure* nodes, finished with a StartAcquisition node. Subsequent rows can contain the corresponding *Data nodes configured above, and any processing / visualizing nodes needed. Accessing GUIs Some nodes, specifically many of the Configure* nodes, can have a GUI attached to the node that allows for easy manipulation of Configuration properties in a graphical environment. These GUIs can be accessed by double-clicking on a node; if there is a GUI assigned to it, then it will be opened up in a new window. Please note that not all nodes have GUIs, but if you think that a node would benefit from having this functionality added please reach out to us. Note GUIs are not part of the base OpenEphys.Onix library. To take advantage of this added functionality, you must install the accompanying OpenEphys.Onix.Design library using the Bonsai package manager. A number of Bonsai nodes also come shipped with GUIs, but similar to OpenEphys.Onix, the corresponding *.Design library must be installed before it can be leveraged."
  },
  "articles/getting-started/visualizing_data.html": {
    "href": "articles/getting-started/visualizing_data.html",
    "title": "Visualizing Data",
    "keywords": "Visualizing Data To visualize data from any *Data node, typically the variable that needs to be visualized must first be output from the node. To do this, right-click on any *Data node and select the first option; this will be something similar to Output (OpenEphys.Onix.*DataFrame). From the drop-down list, select the corresponding data variable to be visualized. Doing so will create a new node in the workflow. Select this new node and right-click it, search for the Select Visualizer option and choose a visualizer from that drop-down menu. Note that some data types will require a secondary node to be connected directly after it, such as a RollingGraph node. If so, this secondary node must be right-clicked and the appropriate visualizer must be selected here. Note Some visualizers come as Bonsai nodes and can be found in the Bonsai.Design.Visualizers package, which can be installed in the Bonsai package manager. These nodes must be placed in the workflow and be linked to a data node to visualize the data properly."
  },
  "articles/getting-started/what_is_onix.html": {
    "href": "articles/getting-started/what_is_onix.html",
    "title": "What is ONIX?",
    "keywords": "What is ONIX? ONIX is a data acquisition system for neuroscience, composed of various pieces of hardware. ONIX differs from other acquisition systems in three major points: 1. Standards All acquisition systems follow specific sets of rules that outline how data is structured and transmitted between parts of the system. For instance, Intan headstages and the classic Open Ephys Board use a Serial Peripheral Interface (SPI) for communication. Many different and non-interchangeable interfaces and protocols are in use, which is why each type of probe or camera usually comes with its own specific acquisition board. The Open Neuro Interface (ONI) is an open standard that was designed as a unified protocol to communicate with a wide variety of instruments. By specifying how data should be organised but remaining agnostic to the type of data, a single acquisition system can be used to acquire from, for instance, extracellular probes, cameras, and tracking systems. This means that the same software and hardware can now be used for a wide range of different recording instruments, so that labs do not have to spend time and money purchasing separate acquisition systems for each extra tool they wish to add to their experiment. Additionally, for those who want to develop new tools to study the brain, ONIX provides a powerful hardware backend and software infrastructure that can be reused to control almost any type of recoding instrument. 2. Tethers There is a growing appreciation of experiments that examine the natural behaviours of animals. This often means using larger and more intricate (perhaps 3D) experimental setups. It also means that the animal should be impaired as little as possible by the recording setup. To achieve this it is of course important to reducing the weight of the headstage, but the weight of the tether that connects the headstage to the acquisition system is often overlooked. As the animal explores the arena, the centre of mass of the tether is rarely directly above the animal. Instead, it is off to one side, introducing a rotational force on the animal. The animal must compensate for this torque in order to keep its head up straight. Because the ONI specification allows communication over a single wire, ONIX uses a single coaxial cable, making ONIX tethers lighter and thinner compared to classic acquisition systems. ONIX tethers are 0.1 to 0.4 mm in diameter and are extremely flexible. The tether must also be able to rotate as the animal does to prevent it from becoming twisted. Commutators are hardware devices that allow the tether to rotate while maintaining an electrical connection to the rest of the path to the acquisition system. As the animal moves through the arena, the ONIX commutator receives 3D tracking information from the headstage and drives a motor to actively rotate the tether, preventing twisting. 3. Latencies In closed-loop experiments, data is not only acquired, but also processed and acted upon. For instance, one can provide optogenetic stimulation to a brain area every time a certain type of event is detected by an extracellular probe. The closed-loop latency of the acquisition system describes how much time passes between the initial event and the response of the system. In classic acquisition systems, this time is primarily spent on transmitting and processing acquired data, which becomes more and more challenging as the number of channels on a probe increases. A short latency allows the user to respond on the timescale of the biological event; for instance, within the integration window of a neuron. Many classic acquisition systems rely on a USB connection between the acquisition board and PC. The slower transfer characteristics of USB means that a typical closed-loop latency would be in the range of several to tens of milliseconds. This is a considerable duration for the brain, as it is notably longer than the average action potential duration of around 1 ms. ONIX has much shorter latencies, of around 150 microseconds, because the host board of ONIX is directly connected to the acquisition PC, in a PCIe slot. This means that the system can respond quickly to detected events. It also means that time is freed up for this detection itself; by reducing the overhead time, more complex analysis can be run to extract the phenomenon you are interested in."
  },
  "articles/hubs/breakoutboard.html": {
    "href": "articles/hubs/breakoutboard.html",
    "title": "BreakoutBoard",
    "keywords": "BreakoutBoard Workflow This is a fully functional workflow that configures all devices on a BreakoutBoard headstage. Devices For more information on each device, check out their corresponding page: MemoryMonitor Heartbeat DigitalIO AnalogIO"
  },
  "articles/hubs/headstage64.html": {
    "href": "articles/hubs/headstage64.html",
    "title": "Headstage64",
    "keywords": "Headstage64 Workflow This is a fully functional workflow that configures all devices on a Headstage64 headstage. Devices For more information on each device, check out their corresponding page: TS4231 RHD2164 BNO055"
  },
  "articles/hubs/neuropixelsv1e.html": {
    "href": "articles/hubs/neuropixelsv1e.html",
    "title": "NeuropixelsV1eHeadstage",
    "keywords": "NeuropixelsV1eHeadstage Workflow This is a fully functional workflow that configures all devices on a NeuropixelsV1e headstage. Devices For more information on each device, check out their corresponding page: NeuropixelsV1e BNO055"
  },
  "articles/hubs/neuropixelsv2e.html": {
    "href": "articles/hubs/neuropixelsv2e.html",
    "title": "NeuropixelsV2eHeadstage",
    "keywords": "NeuropixelsV2eHeadstage Workflow This is a fully functional workflow that configures all devices on a NeuropixelsV2e headstage. Devices For more information on each device, check out their corresponding page: NeuropixelsV2e BNO055"
  },
  "articles/hubs/neuropixelsv2ebeta.html": {
    "href": "articles/hubs/neuropixelsv2ebeta.html",
    "title": "NeuropixelsV2eBetaHeadstage",
    "keywords": "NeuropixelsV2eBetaHeadstage Workflow This is a fully functional workflow that configures all devices on a NeuropixelsV2eBeta headstage. Devices For more information on each device, check out their corresponding page: NeuropixelsV2eBeta BNO055"
  },
  "index.html": {
    "href": "index.html",
    "title": "OpenEphys.Onix",
    "keywords": "OpenEphys.Onix Warning These docs are under active development, feel free to contribute by either raising an issue or following the links saying Edit this page. OpenEphys.Onix is a library that can be used in Bonsai to acquire data from ONIX devices, such as the Open Ephys Acquisition Board. For more details on the ONI specification, check out this link, and to learn more about ONIX devices and their implemention of ONI, click here. Advantages While data can be acquired using programs other than Bonsai, there are a number of advantages that come from building OpenEphys.Onix as a Bonsai library. A major advantage is that it maintains maximal compatibility with open source programs, including OpenCV, DeepLabCut, and many more. Other major advantages include: Visual interface provided by building on top of Bonsai's foundation Time-stamped synchronization across multiple devices Combine data streams for real-time processing Quick Links Getting Started OpenEphys.Onix Tutorials New to Bonsai or OpenEphys.Onix? Start here! Operator references here Check out our tutorials for useful workflows"
  },
  "tutorials/headstage64-tut.html": {
    "href": "tutorials/headstage64-tut.html",
    "title": "Headstage 64 Tutorial",
    "keywords": "Headstage 64 Tutorial"
  },
  "tutorials/landing-page.html": {
    "href": "tutorials/landing-page.html",
    "title": "Tutorials",
    "keywords": "Tutorials Note This is a placeholder, so that we can link to the Tutorials page without needing to link to a specific tutorial. This should be populated with details on how to use the tutorials, and maybe contain an automatically generated list of possible tutorials or classes of tutorials"
  },
  "tutorials/neuropixelsv1e-tut.html": {
    "href": "tutorials/neuropixelsv1e-tut.html",
    "title": "NeuropixelsV1e Tutorial",
    "keywords": "NeuropixelsV1e Tutorial"
  },
  "tutorials/neuropixelsv2e-tut.html": {
    "href": "tutorials/neuropixelsv2e-tut.html",
    "title": "NeuropixelsV2e Tutorial",
    "keywords": "NeuropixelsV2e Tutorial"
  },
  "tutorials/rhs2116-tut.html": {
    "href": "tutorials/rhs2116-tut.html",
    "title": "RHS2116 Tutorial",
    "keywords": "RHS2116 Tutorial For more information on hardware, refer to the Onix Hardware Documentation for RHS2116. Tutorial 1 Description Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Workflow Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Important Parameters Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Explainer Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Tutorial 2 Description Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Workflow Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Important Parameters Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Explainer Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Tutorial 3 Description Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Workflow Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Important Parameters Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Explainer Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
  },
  "tutorials/uclaminiscopev4-tut.html": {
    "href": "tutorials/uclaminiscopev4-tut.html",
    "title": "UCLA Miniscope V4 Tutorial",
    "keywords": "UCLA Miniscope V4 Tutorial For more information on hardware, refer to the Onix Hardware Documentation for UCLA Miniscope v4. Tutorial 1 Description Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Workflow Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Important Parameters Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Explainer Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Tutorial 2 Description Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Workflow Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Important Parameters Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Explainer Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Tutorial 3 Description Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Workflow Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Important Parameters Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Explainer Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
  }
}